/*
  2014-소수의 곱
  이 문제를 해결하기 위해서 최소 힙을 이용하였다.
  우선 소수를 입력받으면 입력받은 값 모두 최소 힙에 저장한다.
  그리고 최소힙의 top에 있는 수와 입력받은 수를 곱하면서 최소힙에 추가하고, 현재 최솟값을 제거 해 준다.
  이 때, 중복으로 계산되는 수가 있으므로 set을 이용하여 중복체크를 해 준다.
  그런데, 단순히 이렇게만 구현하다 보면 나올 수 있는 수가 굉장히 많기 때문에 제한된 메모리 내에서 해결하지 못할 수 있다.
  따라서 N이 최대 10만이 들어온다는 사실을 이용하여 만약 최소힙의 크기가 10만이라면,
  현재 힙에 있는 수 중 최댓값을 이용하여 최댓값보다 곱한 수가 크면 굳이 힙에 추가적으로 수를 집어넣지 않는 작업을 추가로 해 준다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	ll k, n;
	cin >> k >> n;
	set<ll> s;
	vector<ll> arr(k);
	priority_queue<ll> pq;
	ll maximum = 0;
	ll size = 0;
	for (ll i = 0; i < k; i++) {
		cin >> arr[i];
		maximum = max(maximum, arr[i]);
		pq.push(-arr[i]);
		s.insert(arr[i]);
		size++;
	}

	ll top;
	for (ll i = 0; i < n - 1; i++) {
		top = -pq.top();
		s.erase(top);
		pq.pop();
		size--;
		for (ll j = 0; j < k; j++) {
			if (arr[j] * top > INT_MAX || s.find(arr[j] * top) != s.end()) continue;
			if (size >= 100000 && arr[j] * top > maximum) continue;
			pq.push(-arr[j] * top);
			s.insert(arr[j] * top);
			size++;
			maximum = max(maximum, arr[j] * top);
		}
	}
	cout << -pq.top();
	return 0;
}
