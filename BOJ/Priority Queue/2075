/*
  2075-N번째 큰 수 
  N번째 큰 수는 다시 말해서 N*N-N번째로 작은 수를 의미한다.
  이 문제에서 주어진 배열은 아래로 갈수록 값이 커지기 때문에 별도의 2차원 배열을 만들지 않고 문제를 해결하기 위해서 최소힙을 이용하여 구현했다.
  각 행을 보면서 원소를 priority queue에 담는다.
  그리고 두번째 행부터는 입력받은 원소를 추가하고 제일 작은 원소를 제거한다.
  N번째로 큰 수를 보기 위해서는 가장 큰 원소 N개를 담은 priority queue에서 top을 보면 되기 때문에, priority queue에는 항상 N개의 원소만 있어도 충분하다.
  이 과정을 반복하면서 모든 값을 입력받았다면 priority queue의 top에 위치한 수가 N번째 큰수가 됨을 알 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	priority_queue<int> pq;
	int n, num = 0;
	cin >> n;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> num;
			pq.push(-num);
			if (i > 0) pq.pop();
		}
	}

	cout << -pq.top();
	return 0;
}
