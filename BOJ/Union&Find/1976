/*
  1976-여행 가자
  한 번에 여행할 수 있는 모든 경로를 union하고, 입력되는 route에서 해당 경로들이 같은 경로상에 있는지 find하는 작업으로 문제를 해결할 수 잇다.
  root를 찾는 경우, find의 값이 음수인 값을 root로 설정한다.
  그리고 다른 지역의 여행지가 해당 root와 묶여있는지 판단한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int find(int a, vector<int>& parent) {
	if (parent[a] < 0) return a;
	parent[a] = find(parent[a], parent);
	return parent[a];
}
void merge(int a, int b, vector<int>& parent) {
	int reta = find(a, parent);
	int retb = find(b, parent);
	if (reta == retb) return;
	if (parent[reta] < parent[retb]) {
		parent[reta] += parent[retb];
		parent[retb] = reta;
	}
	else {
		parent[retb] += parent[reta];
		parent[reta] = retb;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m, num;
	cin >> n >> m;
	vector<vector<int>> arr(n + 1, vector<int>(n + 1));
	vector<int> route(m);
	vector<int> parent(n + 1, -1);

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cin >> num;
			if (num == 1) merge(i, j, parent);
		}
	}

	int root = -1;
	bool possible = true;
	for (int i = 0; i < m; i++) {
		cin >> num;
		int ret = find(num, parent);
		if (root == -1) {
			if (ret < 0) root = num;
			else root = ret;
		}
		else if (ret != root) possible = false;
	}
	if (possible)cout << "YES";
	else cout << "NO";

	return 0;
}
