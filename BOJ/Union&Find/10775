/*
  10775-공항
  이 문제의 기본 아이디어는 비행기가 n번째 이하의 공항에 도킹하고자 한다면 n번부터 채우는 방식으로 배치하는 것 이다.
  이렇게 했을 때 매번 n번부터 하나씩 보면서 도킹할 수 있는지 여부를 확인하는 것 이다.
  이 방식을 단순 반복문을 이용하여 구현한다면 시간 복잡도가 O(n^2)이 된다.
  따라서 도킹할 수 있는 공항을 알아보는 방법을 더 단순화 하기 위해서 union & find를 이용한다.
  n번째 공항에 도킹을 했다면, 그 다음 다시 n번 이하의 공항에 도킹하고자 한다면 n-1번째 공항에 도킹을 시켜야 한다.
  따라서 n번째 공항에 도킹을 하면 n과 n-1을 union하여 다음 n이 들어왔을 때는 n-1번째 공항에 도킹을 할 수 있도록 한다.
  이렇게 구현하면 도킹할 수 있는 공항의 정보를 빠르게 알 수 있기 때문에 빠른 시간 내에 문제를 해결할 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int find(int a, vector<int>& parent) {
	if (parent[a] <= 0) return a;
	parent[a] = find(parent[a], parent);
	return parent[a];
}
void merge(int a, int b, vector<int>& parent) {
	int reta = find(a, parent);
	int retb = find(b, parent);
	if (reta == retb) return;
	if (a < b) {
		parent[reta] += parent[retb];
		parent[retb] = reta;
	}
	else {
		parent[retb] += parent[reta];
		parent[reta] = retb;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	//freopen("0.in", "r", stdin);
	int g, p;
	cin >> g >> p;
	vector<int> parent(g + 1, -1);
	vector<int> plane(p);
	vector<int> acc(g + 1, 0);
	for (int i = 0; i < p; i++) cin >> plane[i];
	
	int cnt = 0;
	for (int i = 0; i < p; i++) {
		int gnum = plane[i];
		gnum = plane[i];
		int par = find(gnum, parent);
		acc[par]++;
		if (acc[par] > par)break;
		merge(par, par - 1, parent);
		
		cnt++;
	}
	cout << cnt;
	return 0;
}
