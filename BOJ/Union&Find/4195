/*
  4195-친구 네트워크
  이 문제는 사람의 이름이 주어지면 두 사람을 union하고, union한 그룹의 크기를 출력하는 문제다.
  그런데 사람의 이름이 숫자가 아니라 string으로 들어오게 되므로 따로 이름별 index를 정해줘야한다.
  그래서 map을 이용하여 indexing하였다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int find(int a, vector<int>& parent) {
	if (parent[a] < 0) return a;
	parent[a] = find(parent[a], parent);
	return parent[a];
}

void merge(int a, int b, vector<int>& parent) {
	int reta = find(a, parent);
	int retb = find(b, parent);
	if (reta == retb) return;
	if (parent[reta] < parent[retb]) {
		parent[reta] += parent[retb];
		parent[retb] = reta;
	}
	else {
		parent[retb] += parent[reta];
		parent[reta] = retb;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int t;
	cin >> t;
	while (t--) {
		int key = 0;
		map<string, int> m;
		int n;
		cin >> n;
		string s;
		int a, b;
		vector<int> parent(3000000, -1);
		for (int i = 0; i < n; i++) {
			cin >> s;
			if (m.find(s) == m.end()) m.insert({ s, key++ });
			a = m.find(s)->second;
			cin >> s;
			if (m.find(s) == m.end()) m.insert({ s, key++ });
			b = m.find(s)->second;
			merge(a, b, parent);
			cout << abs(parent[find(a, parent)])<<"\n";
		}
	}
	return 0;
}
