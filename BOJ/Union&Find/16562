/*
  16562-친구비
  우선 union을 이용하여 친구비를 한 번만 낼 수 있는 그룹을 찾는다.
  union을 할 때, parent는 친구비가 더 낮은 친구를 위주로 union을 한다.
  union 작업이 다 끝난 뒤에는 parent가 음의 값을 가지는 경우 친구비를 계산하여 모든 친구와 친구가 되기 위해 필요한 친구 비를 구한다.
  그리고 k를 기준으로 친구를 할 수 있음과 없음을 구분하여 결과를 출력한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int find(int a, vector<int>& parent) {
	if (parent[a] < 0) return a;
	parent[a] = find(parent[a], parent);
	return parent[a];
}
void merge(int a, int b, vector<int>& parent, vector<int> &arr) {
	int reta = find(a, parent);
	int retb = find(b, parent);
	if (reta == retb) return;
	if (arr[reta] < arr[retb]) {
		parent[reta] += parent[retb];
		parent[retb] = reta;
	}
	else {
		parent[retb] += parent[reta];
		parent[reta] = retb;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m, k;
	cin >> n >> m >> k;
	vector<int> arr(n + 1);
	vector<int> parent(n + 1, -1);
	
	for (int i = 1; i <= n; i++) cin >> arr[i];
	while (m--) {
		int a, b;
		cin >> a >> b;
		merge(a, b, parent, arr);
	}

	int sum = 0;
	for (int i = 1; i <= n; i++) {
		if (parent[i] < 0) sum += arr[i];
	}
	
	if (sum > k) cout << "Oh no\n";
	else cout << sum;
	return 0;
}
