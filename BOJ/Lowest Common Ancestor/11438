/*
  11438 - LCA2
  우선 DFS를 이용하여 트리를 구성하고, 각 정점의 depth와 parent 정보를 저장한다.
  이 때, 더 바르게 공통 부모 조상을 찾기 위해서 sparse table의 원리를 이용하여 1, 2, 4, ... depth 위에 있는 부모의 정보도 저장을 해 준다.
  그 다음 쿼리문이 들어온다면 다음과 같은 과정을 이용하여 LCA를 찾는다.
    1. 두 node의 depth를 맞춰준다.
    2. 두 node와 가장 멀리 떨어져있는 부모 node를 보면서, 두 node의 부모중 다른 값이 있다면 해당 값으로 이동하여 다시 부모를 탐색한다.
  1, 2과정을 통해 찾은 두 node는 LCA의 자식 node다.
  따라서 두 node 중 한 node의 부모 node를 출력하게 되면 해당 부모 node가 다른 한 node의 부모 node도 되므로 LCA를 출력하게 되는 것 이다.
*/

#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;

void Tree(int cur, vector<vector<int>>& adj, vector<vector<int>>& parent, vector<int>& depth) {
	for (int n : adj[cur]) {
		if (depth[n] == -1) {
			parent[n][0] = cur;
			depth[n] = depth[cur] + 1;
			Tree(n, adj, parent, depth);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	int u, v;

	cin >> n;
	int h = ceil(log2(n + 1));
	vector<vector<int>> adj(n + 1);
	for (int i = 0; i < n - 1; i++) {
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	vector<vector<int>> parent(n + 1, vector<int>(h, -1));
	vector<int> depth(n + 1, -1);
	depth[1] = 0;
	Tree(1, adj, parent, depth);

	for (int j = 0; j < h; j++) {
		for (int i = 1; i <= n; i++) {
			if (parent[i][j] != -1) {
				parent[i][j + 1] = parent[parent[i][j]][j];
			}
		}
	}

	int q;
	cin >> q;
	while (q--) {
		cin >> u >> v;
		if (depth[u] < depth[v]) swap(u, v);
		int diff = depth[u] - depth[v];
        // 두 node의 depth맞추기
		for (int i = 0; diff != 0; i++) {
			if (diff % 2 != 0) u = parent[u][i];
			diff = diff / 2;
		}

		if (u != v) {
			for (int i = h - 1; i >= 0; i--) {
				if (parent[u][i] != -1 && parent[u][i] != parent[v][i]) {	
                    //같은 depth부터 하나씩 살펴보면서 공통 부모 바로 밑 node까지 이동한다.
					u = parent[u][i];
					v = parent[v][i];
				}
			}
			u = parent[u][0];
		}
		cout << u << "\n";
	}
	return 0;
}
