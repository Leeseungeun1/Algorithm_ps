/*
  16507-어두운 건 무서워
  pSum[i][j]를 [0][0]부터 [i-1][j-1]까지의 2차원 배열의 합으로 정의한다.
  그러면 (r1,c1)부터 (r2, c2)까지의 합은 pSum[i][j] = pSum[i][j - 1] + pSum[i - 1][j] - pSum[i - 1][j - 1] + arr[i - 1][j - 1]로 정의가 된다.
  그리고 (r2-r1+1)*(c2-c1+1)로 (r1, c1)부터 (r2, c2)까지에 포함 된 칸의 수를 알 수 있다.
  따라서 이 두 값을 이용하여 평균값을 구하면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int r, c, q;
	cin >> r >> c >> q;
	vector<vector<int>> arr(r, vector<int>(c));
	vector<vector<int>> pSum(r + 1, vector<int>(c + 1));
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) cin >> arr[i][j];
	}
	for (int i = 0; i <= r; i++) pSum[i][0] = 0;
	for (int i = 0; i <= c; i++) pSum[0][i] = 0;

	for (int i = 1; i <= r; i++) {
		for (int j = 1; j <= c; j++) {
			pSum[i][j] = pSum[i][j - 1] + pSum[i - 1][j] - pSum[i - 1][j - 1] + arr[i - 1][j - 1];
		}
	}
	
	int r1, c1, r2, c2;
	while (q--) {
		cin >> r1 >> c1 >> r2 >> c2;
		int sum = pSum[r2][c2] - pSum[r2][c1 - 1] - pSum[r1 - 1][c2] + pSum[r1 - 1][c1 - 1];
		int num = (r2 - r1 + 1) * (c2 - c1 + 1);
		cout << sum / num << "\n";
	}
	return 0;
}
