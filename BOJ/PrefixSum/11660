/*
  11660-구간 합 구하기 5
  이 문제는 2차원 배열의 구간 합을 구하는 문제다.
  pSum[x][y]를 (0,0)부터 (x,y)까지 원소의 합을 저장한 값으로 정의를 한다.
  그러면 pSum[x][y]=pSum[x-1][y]+pSum[x][y-1]-pSum[x-1][y-1]+arr[x-1][y-1]으로 정의가 된다.
  이렇게 pSum을 만든 뒤에 (a,b)부터 (c,d)까지의 합을 살펴보면 된다.
  이 때, (a,b)부터 (c,d)까지의 합은 pSum[c][d] - pSum[a - 1][d] - pSum[c][b - 1] + pSum[a - 1][b - 1] 식을 통해서 구할 수 있다.
  이런 prefix sum 배열을 이용하여 부분 배열의 합을 O(1)안에 해결할 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;
	vector<vector<int>> arr(n, vector<int>(n));
	vector<vector<int>> pSum(n + 1, vector<int>(n + 1));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) cin >> arr[i][j];
	}

	for (int i = 0; i < n + 1; i++) {
		pSum[0][i] = 0;
		pSum[i][0] = 0;
	}

	for (int i = 1; i < n + 1; i++) {
		for (int j = 1; j < n + 1; j++) {
			pSum[i][j] = pSum[i - 1][j] + pSum[i][j - 1] - pSum[i - 1][j - 1] + arr[i - 1][j - 1];
		}
	}

	int x1, y1, x2, y2;
	for (int i = 0; i < m; i++) {
		cin >> x1 >> y1 >> x2 >> y2;
		cout << pSum[x2][y2] - pSum[x1 - 1][y2] - pSum[x2][y1 - 1] + pSum[x1 - 1][y1 - 1] << "\n";
	}

	return 0;
}
