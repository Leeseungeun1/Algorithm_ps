/*
  1182-부분수열의 합
  이 문제를 별도의 visited함수 없이 back-tracking으로 해결하기 위해서, 특정 node에서 바로 부분 배열의 합을 계산하는 방법을 이용했다.
  이전 node에서 전달 된 부분 배열의 합을 이용하여, 주어진 부분 배열의 합과 현재 node의 값을 더했을 때, S의 값과 일치하는 여부를 확인한다.
  이 때, S와 일치한다면 부분배열의 개수 값을 카운팅 해주면 된다. 
  그리고 다음 node로 이동할 때 현재 node의 값을 포함하는 경우와 포함하지 않는 경우 두 경우를 살펴보는 과정을 재귀함수로 구현하였다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

int cnt=0;

void DFS(vector<int>& arr, int index, int sum, int total, ll wantSum){
	if(index==total) return;
	
	if(sum+arr[index]==wantSum) cnt++;
	
	DFS(arr, index+1, sum+arr[index], total, wantSum);
	DFS(arr, index+1, sum, total, wantSum);
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll n, s;
	cin>>n>>s;
	vector<int> arr(n);
	
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	
	DFS(arr, 0, 0, n, s);
	cout<<cnt;
	return 0;
}
