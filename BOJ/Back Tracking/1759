/*
  1759-암호 만들기
  이 문제를 back-tracking으로 해결하기 위해서, 각 배열의 index에서 자음과 모음의 수, 그리고 암호의 길이를 판단하여 조건이 충족되면 암호를 출력했다.
  우선 각 index의 문자를 파악한뒤, 모음의 수와 자음의 수를 파악한다.
  만약 모음의 수, 자음의 수, 그리고 지금까지 선택한 문자의 수가 주어진 조건에 충족된다면 해당 문자열을 출력한다.
  그리고 현재 문자를 포함한 경우와 포함하지 않은 경우로 나눈 뒤, 다음 index를 탐색하면서 동일한 과정을 반복한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

int cnt=0;

void DFS(vector<char>& arr, int index, int c, int v, int length, int n, vector<char> collect){
	if(index==n) return;
	
	if(arr[index]=='a'||arr[index]=='e'||arr[index]=='i'||arr[index]=='o'||arr[index]=='u') v++;
	else c++;
	
	if(c+v==length && c>=2 && v>=1) {
		int size=collect.size();
		for(int i=0;i<size;i++) cout<<collect[i];
		cout<<arr[index];
		cout<<"\n";
	}
	
	collect.push_back(arr[index]);
	DFS(arr, index+1, c, v, length, n, collect);
	collect.erase(collect.end()-1);
	if(arr[index]=='a'||arr[index]=='e'||arr[index]=='i'||arr[index]=='o'||arr[index]=='u'){
		DFS(arr, index+1, c, v-1, length, n, collect);
	}
	else DFS(arr, index+1, c-1, v, length, n, collect);
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll l, c;
	cin>>l>>c;
	vector<char> arr(c);
	for(int i=0;i<c;i++) cin>>arr[i];
	sort(arr.begin(), arr.end());
	
	vector<char> collect;
	DFS(arr, 0, 0, 0, l, c, collect);
	return 0;
}
