/*
  3085-사탕 게임
  이 문제는 모든 칸에 대해서 인접한 칸과 바꾸고, 최대 사탕 개수를 살펴보면 되는 문제다.
  현재 이 코드에서 더 최적화를 시킨다면, 바꾼 칸에 걸쳐있는 행, 열에 대해서 사탕 개수만 다시 살펴보면 된다.
  4중 for 문이 돌지만, 최대 입력 N의 수가 50이기 때문에 50^4의 시간을 갖더라도 시간초과가 나지 않는다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N;
	cin >> N;
	vector<vector<char>> arr(N, vector<char>(N, 0));
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> arr[i][j];
		}
	}

	int answer = 0;
	for (int i = 0; i < N; i++) {
		int num = 1;
		for (int j = 1; j < N; j++) {
			if (arr[i][j - 1] != arr[i][j]) {
				answer = max(answer, num);
				num = 1;
			}
			else num++;
		}
		answer = max(num, answer);
	}

	for (int j = 0; j < N; j++) {
		int num = 1;
		for (int i = 1; i < N; i++) {
			if (arr[i - 1][j] != arr[i][j]) {
				answer = max(answer, num);
				num = 1;
			}
			else num++;
		}
		answer = max(num, answer);
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N - 1; j++) {
			char first = arr[i][j];
			char second = arr[i][j + 1];
			if (first == second) continue;
			arr[i][j] = second;
			arr[i][j + 1] = first;
			for (int k = 0; k < N; k++) {
				int num = 1;
				for (int l = 1; l < N; l++) {
					if (arr[k][l - 1] != arr[k][l]) {
						answer = max(answer, num);
						num = 1;
					}
					else {
						num++;
					}
				}
				answer = max(answer, num);
			}
			for (int l = 0; l < N; l++) {
				int num = 1;
				for (int k = 1; k < N; k++) {
					if (arr[k - 1][l] != arr[k][l]) {
						answer = max(answer, num);
						num = 1;
					}
					else {
						num++;
					}
				}
				answer = max(answer, num);
			}
			arr[i][j] = first;
			arr[i][j + 1] = second;
		}
	}

	for (int j = 0; j < N; j++) {
		for (int i = 0; i < N - 1; i++) {
			char first = arr[i][j];
			char second = arr[i + 1][j];
			if (first == second) continue;
			arr[i][j] = second;
			arr[i + 1][j] = first;
			for (int k = 0; k < N; k++) {
				int num = 1;
				for (int l = 1; l < N; l++) {
					if (arr[k][l - 1] != arr[k][l]) {
						answer = max(answer, num);
						num = 1;
					}
					else {
						num++;
					}
				}
				answer = max(answer, num);
			}
			for (int l = 0; l < N; l++) {
				int num = 1;
				for (int k = 1; k < N; k++) {
					if (arr[k - 1][l] != arr[k][l]) {
						answer = max(answer, num);
						num = 1;
					}
					else {
						num++;
					}
				}
				answer = max(answer, num);
			}
			arr[i][j] = first;
			arr[i + 1][j] = second;
		}
	}

	cout << answer << "\n";
	return 0;
}
