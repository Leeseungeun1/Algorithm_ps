/*
  3117 - YouTube
  이 문제는 arr[i][j]를 i번째 동영상을 시청한 이후 2^j분 후에 시청되는 동영상의 번호로 정의하여 해결할 수 있다.
  이 arr를 다 채워넣은 뒤에, k분 뒤에 시청 할 동영상을 찾아내면 된다.
  이 때, 현재 보고있는 동영상을 1분동안 시청하기 때문에 k-1분 뒤에 시청 할 동영상을 찾아 구하면 된다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	ll n, m, k;
	cin >> n >> m >> k;
	vector<vector<ll>> arr(m + 1, vector<ll>(31));
	vector<ll> x(n);

	for (ll i = 0; i < n; i++) cin >> x[i];
	for (ll i = 1; i <= m; i++) cin >> arr[i][0];
	for (ll j = 1; j <= 30; j++) {
		for (ll i = 1; i <= m; i++) {
			arr[i][j] = arr[arr[i][j - 1]][j - 1];
		}
	}

	ll kstore = k;
	for (ll i = 0; i < n; i++) {
		ll w = x[i];
		k = kstore - 1;
		for (ll j = 30; j >= 0; j--) {
			if (k >= 1 << j) {
				k = k - (1 << j);
				w = arr[w][j];
			}
		}
		cout << w << " ";
	}
	return 0;
}
