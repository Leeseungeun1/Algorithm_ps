/*
  9576 - 책 나눠주기
  이 문제는 책을 받을 사람을 한 그룹으로, 책을 다른 한 그룹으로 묶어 이분매칭을 이용하여 해결할 수 있다.
  이분매칭에서 어떤 사람이 선택 한 책이 이미 다른 사람에 의해 선택 된 책이라면,  해당 사람이 다른 책을 선택할 수 있는지 여부를
  dfs를 이용하여 확인한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 1000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

bool dfs(int a, vector<bool>& visited, vector<vector<int>>& adj, vector<int>& A, vector<int>& B) {
	visited[a] = true;
	for (int b : adj[a]) {
		if (B[b] == -1 || (!visited[B[b]] && dfs(B[b], visited, adj, A, B))) {
			A[a] = b;
			B[b] = a;
			return true;
		}
	}
	return false;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		vector<vector<int>> adj(m);
		for (int i = 0; i < m; i++) {
			int a, b;
			cin >> a >> b;
			for (int j = a-1; j <= b-1; j++) adj[i].push_back(j);
		}
		
		vector<int> A(m, -1);
		vector<int> B(n, -1);

		int ans = 0;
		for (int i = 0; i < m; i++) {
			vector<bool> visited(m, false);
			if (dfs(i, visited, adj, A, B)) ans++;
		}
		cout << ans << "\n";
	}
	return 0;
}
