/*
  11375 - 열혈강호
  이 문제는 사람을 한 그룹으로, 일을 다른 한 그룹으로 묶어 이분매칭을 이용하여 해결할 수 있다.
  여기에서 A배열은 각 사람에게 매칭 된 일의 값을, B배열은 각 일에 매칭 된 사람의 번호를 나타낸다.
  이분매칭을 구현할 때, 어떤 사람이 특정 일을 선택한 경우 해당 일을 이미 선택 한 사람이 존재한다면,
  해당 사람이 다른 일을 선택할 수 있는지 여부를 확인하기 위해서 dfs를 이용한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 1000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

bool dfs(int a, vector<bool>& visited, vector<vector<int>>& adj, vector<int>& A, vector<int>& B) {
	visited[a] = true;
	for (int b : adj[a]) {
		if (B[b] == -1 || (!visited[B[b]] && dfs(B[b], visited, adj, A, B))) {
			A[a] = b;
			B[b] = a;
			return true;
		}
	}
	return false;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;

	vector<vector<int>> adj(n + 1);
	for (int i = 1; i <= n; i++) {
		int t;
		cin >> t;
		while(t--){
			int num;
			cin >> num;
			adj[i].push_back(num);
		}
	}

	vector<int> A(n + 1, -1);
	vector<int> B(m + 1, -1);

	int ans = 0;
	for (int i = 1; i <= n; i++) {
		vector<bool> visited(n + 1, false);
		if (dfs(i, visited, adj, A, B)) ans++;
	}

	cout << ans;
	return 0;
}
