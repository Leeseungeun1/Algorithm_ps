/*
  1102-발전소
  우선 이 문제를 처음에는 back-tracking방식으로 접근하였다.
  각각의 발전소를 돌면서 켜지지 않은 발전소를 키고, 그 때의 값을 구한 뒤 최소 비용을 찾았다.
  하지만 back-tracking으로 진행을 해 버리면 시간이 굉장히 오래걸렸기 때문에 시간을 절약하기 위해서 DP를 사용하였다.
  DP[y][on]에서 y는 현재 켜져있는 발전소의 수를 나타내고, on은 켜진 발전소를 나타낸다.
  그리고 dp[y][on]의 값은 y개의 on꼴로 발전소가 켜져있을 때, p-y개의 발전소를 키는 비용 중 최소 비용을 저장한다.
  이 dp배열을 이용하여 현재 켜져있는 발전소를 이용하여 필요한 발전소를 키면 된다.
  이 때, 켜져있는 모든 발전소가 꺼져있는 발전소를 켤 수 있으므로, 매 경우마다 반복문을 통해 모든 켜져있는 발전소에 대해서 비용을 탐색한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, pair<int, int>> piii;

ll dp[17][1 << 17];
string str;
ll limit = 10000000000;
int p, n;

ll fix(vector<vector<ll>>& arr, int y, int on) {
	if (dp[y][on] != -1) return dp[y][on];
	if (y >= p) return dp[y][on] = 0;
	
	ll minimum = limit;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (((on & (1 << i)) != 0) && ((on & (1 << j)) == 0)) {
				minimum = min(minimum, fix(arr, y + 1, on | (1 << j)) + arr[i][j]);
			}
		}
	}
	return dp[y][on] = minimum;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	for (int i = 0; i < 17; i++) {
		for (int j = 0; j < (1 << 17); j++) dp[i][j] = -1;
	}
	
	cin >> n;
	vector<vector<ll>> arr(n, vector<ll>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) cin >> arr[i][j];
	}
	
	cin >> str;
	int y = 0;
	int on = 0;
	for (int i = 0; i < str.size(); i++) {
		if (str[i] == 'Y') {
			y++;
			on = on | (1 << i);
		}
	}

	cin >> p;
	
	ll ret = fix(arr, y, on);
	if (ret >= limit) cout << "-1\n";
	else cout << ret;
	return 0;
}
