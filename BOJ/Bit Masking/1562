/*
  1562-계단 수
  우선 이 문제를 단순하게 접근하면
    1. 각 자릿수에 0~9까지 배치한다.
    2. 다음 자릿수에 이전 자릿수와 1만큼 차이나는 수를 배치한다.
    3. 1~2과정을 n번 반복한다.
  과 같이 접근할 수 있다.
  하지만 이렇게 했을 때 시간복잡도는 O(2^n)이 되기 때문에 코드 수행 시간이 오래걸린다.
  이런 문제를 해결하기 위해서 dp기법을 사용했다.
  dp1[j][k]에서 j는 어떤 계단 수의 시작 수를, k는 해당 계단 수를 구성하는 숫자의 조합을 의미한다.
  
  여기에서 계단 수를 구성하는 숫자 조합을 bit mask를 이용하여 표현했다.
  n번 반복문을 수행하면서 i-1자리 수의 계단 수의 정보를 이용하여 i자리수의 계단 수를 카운팅 하는 방식으로 n자리 수의 계단 수를(0으로 시작하는 수도 포함) 모두 계산했다.
  그리고 최종적으로, 계단 수는 0부터 시작할 수 없으므로 1부터 9까지의 수로 시작하는 계단 수 중에서, 0~9의 조합을 모두 가진 수만 따로 카운팅하여 최종 값을 계산했다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

ll dp1[11][1<<10];
ll dp2[11][1<<10];
ll mod=1000000000;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin>>n;
	
	for(int i=0;i<10;i++){
		dp1[i][1<<i]=1;
	}
	
	int limit=1<<10;
	
	for(int i=2;i<=n;i++){	//자릿수
		for(int j=0;j<10;j++){	//시작수
			for(int k=0;k<limit;k++){
				if(j==0){
					dp2[j][k|1<<j]=(dp2[j][k|1<<j]+dp1[j+1][k])%mod;
				}
				else if(j==9){
					dp2[j][k|1<<j]=(dp2[j][k|1<<j]+dp1[j-1][k])%mod;
				}
				else{
					dp2[j][k|1<<j]=(dp2[j][k|1<<j]+dp1[j+1][k])%mod;
					dp2[j][k|1<<j]=(dp2[j][k|1<<j]+dp1[j-1][k])%mod;
				}
			}
		}
	
		// 배열 옮기기
		for(int j=0;j<10;j++){	
			for(int k=0;k<limit;k++){
				dp1[j][k]=dp2[j][k];
				dp2[j][k]=0;
			}
		}
	}
	
	ll ans=0;
	for(int i=1;i<10;i++){
		ans=(ans+dp1[i][limit-1])%mod;
	}
	cout<<ans;
	return 0;
}
