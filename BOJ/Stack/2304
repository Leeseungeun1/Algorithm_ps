/*
  2304-창고 다각형
  우선 기둥의 길이가 최댓값인 지점 전 까지는 기둥의 길이가 오름차순이 되도록 값을 받으면 된다.
  그리고 기둥의 길이가 최댓값인 지점 이후로는 기둥의 길이가 내림차순이 되도록 값을 받아야한다.
  따라서 기둥의 길이가 최댓값인 부분까지는 현재 추가하려는 기둥의 길이가 stack의 top에 있는 기둥의 길이보다 크거나 같으면 stack에 push한다.
  최댓값인 지점 이후로는 stack의 top에 있는 기둥의 길이가 현재 추가하려는 기둥의 길이보다 작다면,
  stack의 top에 있는 기둥의 길이가 현재 추가하려는 기둥의 길이보다 크거나 같을 때까지 stack을 pop한다.
  그리고 나서 stack에 현재 기둥을 push한다.
  
  그 다음에는 stack에 있는 값을 보면서 창고의 넓이를 계산한다.
  계산하려는 넓이의 밑변은 stack의 top에 있는 지점과 top 아래 있는 지점의 차이고,
  높이는 stack의 top에 있는 길이와 top 아래 있는 길이의 최솟값이다.
  그리고 이렇게 계산을 한다면, 최댓값*1인 직사각형을 한 번 계산하지 못하므로, 이를 따로 추가 해 주면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<pair<ll, ll>> arr(n);
	ll maximum = 0;
	for (int i = 0; i < n; i++) {
		cin >> arr[i].first >> arr[i].second;
		maximum = max(maximum, arr[i].second);
	}
	sort(arr.begin(), arr.end());

	stack<pair<ll, ll>> s;
	ll sum = 0;
	bool flag = false;
	for (int i = 0; i < n; i++) {
		if (flag == true) {
			while (s.top().second < arr[i].second) s.pop();
			s.push({ arr[i].first, arr[i].second });
		}
		if (flag == false) {
			if (s.empty() || s.top().second < arr[i].second) {
				s.push({ arr[i].first, arr[i].second });
				if (arr[i].second == maximum) flag = true;
			}
		}
	}

	while (s.size()>1) {
		ll first = s.top().first;
		ll second = s.top().second;
		s.pop();
		sum = sum + min(s.top().second, second) * (first - s.top().first);
	}
	sum = sum + maximum;

	cout << sum;
	return 0;
}
