/*
  1949-우수 마을
  이 문제는 트리에 다이나믹 프로그래밍 기법을 이용하여 해결할 수 있는 문제다.
  tree를 dfs로 탐색하면서, 특정 node가 포함된 경우와 포함되지 않는 경우 중에 어떤 경우가 더 큰지를 판단하면 된다.
  만약 어떤 node를 포함한다면, 해당 node의 자식node들은 포함되서는 안된다.
  그리고 어떤 node를 포함하지 않는다면, 해당 node의 자식 node를 포함해도 되고 포함하지 않아도 된다.
  이 두 경우에 대해서 어떤 경우에 더 큰 값을 내는지 찾아내면 문제를 해결할 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

void DFS(vector<ll>& val, vector<bool>& visited, vector<vector<ll>>& adj, vector<vector<ll>>& dp, ll node) {
	visited[node] = true;

	ll notinclude = 0;
	ll include = 0;
	bool search = false;
	for (auto n : adj[node]) {
		if (visited[n]) continue;
		search = true;
		DFS(val, visited, adj, dp, n);
		notinclude += max(dp[n][0], dp[n][1]);
		include += dp[n][0];
	}

	if (!search) dp[node][1] = val[node];
	else {
		dp[node][1] = val[node] + include;
		dp[node][0] = notinclude;
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	ll n, a, b;
	cin >> n;
	vector<ll> val(n + 1);
	vector<bool> visited(n + 1, false);
	vector<vector<ll>> adj(n + 1);
	vector<vector<ll>> dp(n + 1, vector<ll>(2, 0));
	for (int i = 1; i <= n; i++) cin >> val[i];
	
	for (int i = 1; i < n; i++) {
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	DFS(val, visited, adj, dp, 1);
	cout << max(dp[1][0], dp[1][1]);
	return 0;
}
