/*
  4803-트리
  주어진 그래프에서 BFS를 이용하여 그래프를 추출하는 방법을 통해서 문제를 해결했다.
  그리고 사이클 여부를 판단하기 위해서는 다음과 같은 과정을 이용하였다.
    1. 연결된 정점이 이미 방문한 정점인데 부모 node이다. => cycle이 아니다.
    2. 연결된 정점이 이미 방문한 정점인데 부모 node가 아니거나 자기자신이다. =>cycle이다.
  이 두 과정을 이용하여 tree여부를 판단한 뒤, 만약 tree인 경우 tree개수를 세 준다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> piii;

bool checkTree(int root, vector<vector<int>>& adj, vector<bool>& visited, vector<int>& parent) {
	queue<int> q;
	q.push(root);
  visited[root]=true;
    
	bool ret = true;
	while (!q.empty()) {
		int node = q.front();
		q.pop();
		for (auto n : adj[node]) {
			if (visited[n] && n == parent[node] && n != node) continue;
			if (visited[n] && (n != parent[node] || n == node)) {
				ret = false;
				continue;
			}
			visited[n] = true;
			q.push(n);
			parent[n] = node;
		}
	}
	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int caseNum = 1;
	while (1) {
		int n, m;
		cin >> n >> m;
		if (n == 0 && m == 0) break;
		bool tree = true;
		vector<vector<int>> adj(n + 1);
		vector<bool> visited(n + 1, false);
		vector<int> parent(n + 1, -1);

		int cnt = 0;
		for (int i = 0; i < m; i++) {
			int a, b;
			cin >> a >> b;
			adj[a].push_back(b);
			adj[b].push_back(a);
		}
		
		for (int i = 1; i <= n; i++) {
			if (visited[i]) continue;
			tree = checkTree(i, adj, visited, parent);
			if (tree) cnt++;
		}
		
		cout << "Case " << caseNum << ": ";
		if (cnt == 1) cout << "There is one tree.\n";
		if (cnt > 1) cout << "A forest of " << cnt << " trees.\n";
		if (cnt < 1) cout << "No trees.\n";
		caseNum++;
	}
	return 0;
}
