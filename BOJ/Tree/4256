/*
  4256-트리
  전위 순회와 중위 순회의 결과를 이용하여 트리를 생성한다.
  우선 전위 순회에서 제일 먼저 나오는 숫자의 값이 트리의 root가 된다.
  그리고 그 다음 숫자와 현재 root가 중위 순회시 나오는 순서를 확인한다.
  만약 다음 숫자가 현재 root보다 먼저 나온다면 해당 숫자는 왼쪽 자식 node가 될 것이고, 현재 root보다 다음에 나온다면 오른쪽 자식 node가 될 것이다.
  그렇게 자식을 추가한 뒤에 자식을 새로운 root로 보고 다음 숫자를 확인하며 이 과정을 반복한다.
  그리고 root는 중첩되므로 history를 저장하기 위해서 stack을 이용하여 root 정보를 저장한다.
  여기서 어떤 root의 중위 순회 index를 i라고 해보자. 그리고 i-1번째에 나오는 값과 i+1번째에 나오는 값을 모두 봤다면, 
  해당 root는 자식 node를 다 본 node이거나 leaf node이다.
  따라서 이 경우 stack에서 해당 root를 제거하고 난 뒤의 node를 다시 root node로 하여 트리를 완성 해 나간다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

class Tree {
public:
	int n;
	vector<vector<int>> children;

	Tree(int N) {
		n = N;
		children.resize(n + 1, vector<int>(2, -1));
	}

	void leftchild(int parent, int left) {
		children[parent][0] = left;
	}

	void rightchild(int parent, int right) {
		children[parent][1] = right;
	}

	void postorder(int node) {
		if (children[node][0] != -1) postorder(children[node][0]);
		if (children[node][1] != -1) postorder(children[node][1]);
		cout << node << " ";
	}
};
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	int t, a, root;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		vector<int> pre(n);
		vector<int> in(n + 1);
		vector<bool> visited(n + 1, false);
		for (int i = 0; i < n; i++) cin >> pre[i];
		for (int i = 0; i < n; i++) {
			cin >> a;
			in[a] = i;
		}

		Tree tree = Tree(n);
		stack<int> s;
		s.push(pre[0]);
		visited[in[pre[0]]] = true;
		for (int i = 1; i < n; i++) {
			bool del = true;
			while (del) {
				int r = s.top();
				int index = in[r];
				bool erase = false;
				if (index - 1 < 0 && visited[index + 1] == true) erase = true;
				else if (index + 1 > n && visited[index - 1] == true) erase = true;
				else if (index - 1 >= 0 && index + 1 < n && visited[index + 1] == true && visited[index - 1] == true) erase = true;
				if (erase) s.pop();
				else del = false;
			}
			root = s.top();
			if (in[pre[i]] < in[root]) tree.leftchild(root, pre[i]);
			else tree.rightchild(root, pre[i]);
			s.push(pre[i]);
			visited[in[pre[i]]] = true;
		}
		tree.postorder(pre[0]);
		cout << "\n";
	}
	return 0;
}
