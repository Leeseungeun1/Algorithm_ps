/*
  1967-트리의 지름
  이 문제를 해결하기 위해서 다음과 같은 알고리즘을 사용하였다.
    어떤 root node에서 해당 node의 자식 node들 중 root node까지의 거리가 가장 긴 node와,
    두번째로 root node까지의 거리가 가장 긴 node간의 거리가 가장 긴 트리의 지름의 후보가 될 수 있다.
  따라서 DFS를 이용하여 leaf node와 subtree간의 길이를 살펴보면서 문제를 해결할 수 있다.
  root와의 거리가 가장 긴 node와 두번째로 긴 node를 알아보기 위해서, 자식과 root 사이의 거리를 모두 배열에 저장한 뒤,
  해당 배열을 정렬하는 방법을 사용하였다.
  그리고 DFS의 leaf node와 root간에는 가장 긴 거리를 이용하여 root node의 부모 node가 leaf node와의 거리를 구하므로 return하는 값은 root와 leaf의 거리가 가장 긴 값으로 한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

ll maximum = 0;

ll DFS(vector<vector<pii>>& adj, vector<bool>& visited, int node) {
	visited[node] = true;

	vector<ll> ans;
	ll retmax = 0;
	for (auto p : adj[node]) {
		if (visited[p.first] == true) continue;
		ll ret = DFS(adj, visited, p.first);
		ans.push_back(p.second + ret);
		retmax = max(retmax, p.second + ret);
	}
	
	int size = ans.size();
	if (size >= 2) {
		sort(ans.begin(), ans.end());
		maximum = max(maximum, ans[size - 1] + ans[size - 2]);
	}
	else maximum = max(maximum, retmax);

	return retmax;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, a, b, c;
	cin >> n;
	vector<vector<pii>> adj(n + 1);
	vector<bool> visited(n + 1, false);
	for (int i = 1; i < n; i++) {
		cin >> a >> b >> c;
		adj[a].push_back({ b,c });
		adj[b].push_back({ a,c });
	}
	
	DFS(adj, visited, 1);
	cout << maximum;
	return 0;
}
