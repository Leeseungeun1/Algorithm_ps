/*
  2533-사회망 서비스(SNS)
  이 문제는 트리의 독립집합을 푸는 것과 유사한 문제로 다음과 같은 규칙들이 있다.
    1. root node가 SNS를 하지 않는다면 자식은 무조건 SNS를 해야한다.
    2. root node가 SNS를 한다면 자식은 SNS를 해도되고 하지 않아도 된다.
  현재 문제에서는 최소 SNS사용자 수를 찾아야 하므로 2번의 경우 자식이 SNS를 하는 경우와 하지 않는 경우 중 더 작은 값을 사용하면 된다.
  그래서 DFS와 dynamic programming 기법을 이용하여 문제를 해결할 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

void DFS(vector<vector<int >>& adj, vector<bool>& visited, vector<vector<int>>& dp, int node) {
	visited[node] = true;

	bool search = false;
	for (auto n : adj[node]) {
		if (visited[n]) continue;
		search = true;
		DFS(adj, visited, dp, n);
		dp[node][0] += dp[n][1];
		dp[node][1] += min(dp[n][0], dp[n][1]);
	}
	dp[node][1]++;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, a, b;
	cin >> n;
	vector<vector<int>> adj(n + 1);
	vector<bool> visited(n + 1, false);
	vector<vector<int>> dp(n + 1, vector<int>(2, 0));
	for (int i = 1; i < n; i++) {
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	DFS(adj, visited, dp, 1);
	cout << min(dp[1][0], dp[1][1]);
	return 0;
}
