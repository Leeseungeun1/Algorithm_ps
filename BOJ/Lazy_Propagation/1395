/*
  1395 - 스위치
  lazy 배열에 해당 구역이 몇 번 호출되어있는지 기록한다.
  만약 동일한 구역이 짝수번 호출 되었다면, 스위치에는 아무 변화가 없는 것과 동일하다.
  홀수번 호출되었다면, 현재 켜져있는 스위치의 수는 전에 꺼져있던 스위치의 수와 동일하다.
  이 규칙을 이용하여 lazy propagation을 진행하면 문제를 해결할 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 100000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

vector<ll> tree;
vector<ll> lazy;

void update_range(int index, int start, int end, int left, int right) {
	if (lazy[index] != 0) {
		if (lazy[index] % 2 == 1) tree[index] = (end - start + 1) - tree[index];
		if (start != end) {
			lazy[2 * index] += lazy[index];
			lazy[2 * index + 1] += lazy[index];
		}
		lazy[index] = 0;
	}

	if (left > end || right < start) return;
	if (left <= start && end <= right) {
		tree[index] = (end - start + 1) - tree[index];
		if (start != end) {
			lazy[2 * index]++;
			lazy[2 * index + 1]++;
		}
		return;
	}
	int mid = (start + end) / 2;
	update_range(2 * index, start, mid, left, right);
	update_range(2 * index + 1, mid + 1, end, left, right);
	tree[index] = tree[2 * index] + tree[2 * index + 1];
}

ll sum(int index, int start, int end, int left, int right) {
	if (lazy[index] != 0) {
		if (lazy[index] % 2 == 1) tree[index] = (end - start + 1) - tree[index];
		if (start != end) {
			lazy[2 * index] += lazy[index];
			lazy[2 * index + 1] += lazy[index];
		}
		lazy[index] = 0;
	}
	if (left > end || right < start) return 0;
	if (left <= start && end <= right) return tree[index];
	int mid = (start + end) / 2;
	return sum(2 * index, start, mid, left, right) + sum(2 * index + 1, mid + 1, end, left, right);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;
	
	int h = ceil(log2(n));
	tree.resize(1 << (h + 1), 0);
	lazy.resize(1 << (h + 1), 0);

	int a, b, c;
	while (m--) {
		cin >> a >> b >> c;
		if (a == 0) {
			update_range(1, 1, n, b, c);
		}
		else {
			cout << sum(1, 1, n, b, c) << "\n";
		}
	}
	return 0;
}
