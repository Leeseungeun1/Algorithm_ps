/*
  12844 - XOR
  lazy propagation을 이용하여 구간 xor을 진행하면 된다.
  이 때, 같은 수를 짝수번 xor하면 0이 된다는 성질을 이용하여
  해당 구간에서 xor될 횟수가 홀수인 경우에만 tree node에 lazy값을 xor 해 준다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 100000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

vector<ll> tree;
vector<ll> lazy;
vector<ll> arr;

void update_range(int index, int start, int end, int left, int right, ll diff) {
	if (lazy[index] != 0) {
		if ((end - start + 1) % 2 == 1)tree[index] ^= lazy[index];
		if (start != end) {
			lazy[2 * index] ^= lazy[index];
			lazy[2 * index + 1] ^= lazy[index];
		}
		lazy[index] = 0;
	}

	if (left > end || right < start) return;
	if (left <= start && end <= right) {
		if ((end - start + 1) % 2 == 1)tree[index] ^= diff;
		if (start != end) {
			lazy[2 * index] ^= diff;
			lazy[2 * index + 1] ^= diff;
		}
		lazy[index] = 0;
		return;
	}
	int mid = (start + end) / 2;
	update_range(2 * index, start, mid, left, right, diff);
	update_range(2 * index + 1, mid + 1, end, left, right, diff);
	tree[index] = tree[2 * index] ^ tree[2 * index + 1];
}

ll find_xor(int index, int start, int end, int left, int right) {
	if (lazy[index] != 0) {
		if ((end - start + 1) % 2 == 1)tree[index] ^= lazy[index];
		if (start != end) {
			lazy[2 * index] ^= lazy[index];
			lazy[2 * index + 1] ^= lazy[index];
		}
		lazy[index] = 0;
	}

	if (left > end || right < start) return 0;
	if (left <= start && end <= right) return tree[index];
	int mid = (start + end) / 2;
	return find_xor(2 * index, start, mid, left, right) ^ find_xor(2 * index + 1, mid + 1, end, left, right);
}
ll init(int index, int start, int end) {
	if (start == end) {
		tree[index] = arr[start];
	}
	else {
		int mid = (start + end) / 2;
		tree[index] = init(2 * index, start, mid) ^ init(2 * index + 1, mid + 1, end);
	}
	return tree[index];
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;
	arr.resize(n + 1);
	for (int i = 1; i <= n; i++) cin >> arr[i];

	ll h = ceil(log2(n));
	tree.resize(1 << (h + 1), 0);
	lazy.resize(1 << (h + 1), 0);
	init(1, 1, n);

	int m;
	cin >> m;
	ll a, b, c, d;
	while (m--) {
		cin >> a;
		if (a == 1) {
			cin >> b >> c >> d;
			if (b > c) swap(b, c);
			update_range(1, 1, n, b + 1, c + 1, d);
		}
		else {
			cin >> b >> c;
			if (b > c) swap(b, c);
			cout << find_xor(1, 1, n, b + 1, c + 1) << "\n";
		}
	}
	return 0;
}
