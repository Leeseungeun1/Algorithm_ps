/*
  2104-부분배열 고르기 (1)
  이 문제를 해결한 첫 번째 방법으로, 분할정복과 segment tree를 이용한 방법이다.
  배열 내의 최솟값을 기준으로 왼쪽 배열, 오른쪽 배열로 다시 나누고 나눠진 배열에서 합*최솟값의 값을 구하며 최댓값을 갱신한다.
  그리고 부분배열을 연산하는 함수해서는 각 배열의 원소들의 합을 return한다.
  그리고 왼쪽 오른쪽의 부분배열들을 계산한 후에는 return 된 값들과 최솟값을 합한 후 다시 합*최솟값의 연산을 수행한다.
  이 때, 최솟값을 구하는 과정을 log n으로 줄이기 위해서 segment tree를 사용하였다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>

using namespace std;
typedef long long ll;

ll maximum = LLONG_MIN;
ll* segtree;

ll init(int index, int start, int end, vector<ll>& arr) {
	if (start == end) {
		segtree[index] = start;
	}
	else {
		int mid = (start + end) / 2;
		ll left = init(2 * index, start, mid, arr);
		ll right = init(2 * index + 1, mid + 1, end, arr);
		if (arr[left] < arr[right]) segtree[index] = left;
		else segtree[index] = right;
	}
	return segtree[index];
}

ll find_minimum(int index, int start, int end, int left, int right, vector<ll>& arr) {
	if (right < start || end < left) return 0;
	if (left <= start && end <= right) return segtree[index];
	else {
		int mid = (start + end) / 2;
		ll l = find_minimum(2 * index, start, mid, left, right, arr);
		ll r = find_minimum(2 * index + 1, mid + 1, end, left, right, arr);
		if (arr[l] < arr[r]) return l;
		else return r;
	}
}
ll arr_divide(int start, int end, vector<ll> &arr, int N) {
	if (start == end) {
		ll res = arr[start] * arr[start];
		maximum = max(maximum, res);
		return arr[start];
	}
	
	int index=find_minimum(1, 1, N, start, end, arr);

	ll res = 0;
	if (index == start) {
		res = arr_divide(start + 1, end, arr, N)+arr[index];
	}
	else if (index == end) {
		res = arr_divide(start, end - 1, arr, N)+arr[index];
	}
	else {
		res = arr_divide(start, index - 1, arr, N) + arr_divide(index + 1, end, arr, N) + arr[index];
	}
	maximum = max(maximum, res*arr[index]);
	return res;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N;
	cin >> N;
	vector<ll> arr(N+1);
	for (int i = 1; i <= N; i++) {
		cin >> arr[i];
	}

	ll h = ceil(log2(N));
	segtree = new ll[1 << (h + 1)];
	init(1, 1, N, arr);
	segtree[0] = arr[0] = LLONG_MAX;

	arr_divide(1, N, arr, N);
	cout << maximum;
	return 0;
}
