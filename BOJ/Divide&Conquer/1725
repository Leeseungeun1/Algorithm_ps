/*
  1725-히스토그램
  부분배열 고르기 문제와 유사한 문제다.
  배열의 중간 지점을 기준으로 왼쪽 배열과 오른쪽 배열을 나누어서 분할 정복을 수행한다.
  왼쪽 배열과 오른족 배열의 히스토그램의 최댓값을 구했다면,
  왼쪽과 오른쪽에 걸쳐서 나타나는 최대 사각형의 유무를 확인하기 위해서
  중간지점부터 시작하여 최대 사각형의 넓이를 찾아나가는 과정을 수행한다.
  이 때, 값이 높은 값을 먼저 선택하는 방향으로 진행하며 최대 사각형의 넓이를 찾아나간다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>

using namespace std;
typedef long long ll;

int find_max(int start, int end, vector<int>& arr) {
	if (start == end) return arr[start];
	int mid = (start + end) / 2;
	int left = find_max(start, mid, arr);
	int right = find_max(mid + 1, end, arr);
	
	int l = mid, r = mid;
	int middle = arr[l];
	int minimum = arr[l];
	while (l > start || r < end) {
		if (r + 1 <= end && (l == start || (arr[l - 1] < arr[r + 1]))) {
			minimum = min(minimum, arr[r + 1]);
			r++;
			if (start==l && middle < minimum * (r - l)) {
				middle = minimum * (r - l);
			}
			else if (middle < minimum * (r - l + 1)) {
				middle = minimum * (r - l + 1);
			}
		}
		else {
			minimum = min(minimum, arr[l-1]);
			l--;
			if (end == r && middle < minimum * (r - l)) {
				middle = minimum * (r - l);
			}
			else if (middle < minimum * (r - l + 1)) {
				middle = minimum * (r - l + 1);
			}
		}
	}
	int ret = max(left, right);
	ret = max(ret, middle);
	return ret;
	
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N;
	cin >> N;
	vector<int> arr(N);
	for (int i = 0; i < N; i++) {
		cin >> arr[i];
	}

	cout<<find_max(0, N-1, arr);
	
	return 0;
}
