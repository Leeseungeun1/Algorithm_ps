/*
  2346-풍선 터뜨리기
  이 문제는 list를 이용하여 해결하는 문제다.
  하지만, pointer가 왼쪽으로도 이동이 가능하므로 doubled link list를 사용해야한다.
  그래서 STL의 list를 이용하여 해결하였다.
  터트려야 할 풍선은 항상 list의 맨 앞에 존재한다.
  만약에 풍선을 터트린 이후 다른 풍선으로 이동을 해야하는데
  왼쪽으로 이동을 해야한다면, list의 뒤쪽부터 풍선들을 list의 앞쪽으로 옮기고
  오른쪽으로 이동을 해야한다면, list의 앞쪽부터 풍선들을 list의 뒤쪽으로 옮긴다.
  이런 과정을 모든 풍선들이 다 터질때까지 반복한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int N;
	cin >> N;
	list<pair<int, int>> arr;
	for (int i = 0; i < N; i++) {
		int n;
		cin >> n;
		arr.push_back({ i + 1, n });
	}

	vector<int> ans;
	while (!arr.empty()) {
		auto iter = arr.begin();
		ans.push_back((*iter).first);
		int num = ((*iter).second);
		if (num >= 0) {
			for (int i = 0; i < num; i++) {
				if (arr.empty()) break;
				if (i == 0) arr.pop_front();
				else {
					arr.push_back(arr.front());
					arr.pop_front();
				}
			}
		}
		else {
			num = abs(num);
			for (int i = 0; i <= num; i++) {
				if (arr.empty()) break;
				if (i == 0) arr.pop_front();
				else {
					arr.push_front(arr.back());
					arr.pop_back();
				}
			}
		}
		
	}
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i]<<" ";
	}

	return 0;
}
