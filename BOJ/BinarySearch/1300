/*
  1300-K번째 수
  이 문제는 B[k]값을 탐색하는 문제다. 따라서 B[k]가 될 수 있는 최대, 최솟값을 설정하고 이를 이용하여 이분탐색을 진행하면 된다.
  개인적으로 이 코드의 핵심에는 탐색하고자 하는 수가 몇 번째 수인지를 확인하는 과정이라고 생각한다.
  그냥 단순히 i*j값을 다 곱해 확인한다면, 이 문제의 시간복잡도는 O(N^2)이 된다.
  따라서 다른 방법으로 탐색하는 수가 몇 번째 수인지 확인하는 과정을 거쳐야한다.
  이것을 확인하는 방법에는 각 열에 탐색하는 수 보다 작은 수가 몇 개있는지 확인하면 된다.
  1열은 1*1, 1*2, 1*3,,, 값이 들어있고
  2열은 2*1, 2*2, 2*3,,, 값이 들어있다.
  따라서 j열에 탐색하는 값보다 작은 수의 개수는 (탐색하는 수/j)개 들어있음을 알 수 있다.
  그러므로 개수를 세는 과정을 O(N)에 해결할 수 있게 된다.
  또한 이 문제는 '정확하게 k번째 수'를 구하는 것이고, 중복된 값도 많을 수 있기 때문에
  자신보다 앞에 있는 수가 k이하면서 자신-1의 수보다 앞에 있는 수가 k이상인 값을 구해야한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	ll N, k;
	cin >> N >> k;

	ll start = 1, end = N * N;
	ll ans = end;
	while (start <= end) {
		ll mid = (start + end) / 2;
		ll cnt = 0;
		ll cnt2 = 0;
		for (ll i = 1; i <= N; i++) {
			ll num = mid / i;
			ll num2 = (mid - 1) / i;
			if (num > N) num = N;
			if (num2 > N)num2 = N;
			cnt += num;
			cnt2 += num2;
		}
		if (cnt >= k) {
			end = mid - 1;
		}
		else {
			start = mid + 1;
		}
		if (cnt2 <= k && k <= cnt) ans = mid;
	}
	cout << ans;
	return 0;
}
