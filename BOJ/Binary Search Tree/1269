/*
 1269-대칭 차집합
 binary search tree를 이용해 구현 된 라이브러리인 set을 이용하여 이 문제를 해결하였다.
 우선 A집합의 원소를 모두 set에 넣은 뒤, B의 각각의 원소가 A에 있는지 여부를 확인했다.
 A와 B가 공통으로 가지고 있는 원소의 개수를 이용하여 대칭 차집합의 원소의 개수를 구하면 된다.
*/
#include <iostream>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	ll n, m, num;
	cin >> n >> m;
	set<ll> s;
	for (int i = 0; i < n; i++) {
		cin >> num;
		s.insert(num);
	}

	ll cnt = 0;
	for (int i = 0; i < m; i++) {
		cin >> num;
		if (s.find(num) != s.end()) cnt++;
	}

	cout << n + m - 2 * cnt;
	return 0;
}
