/*
  2623 - 음악프로그램
  이 문제의 핵심은 '출연하는 순서가 있다는 점'이다.
  즉, A 다음에 B가 출연한다면, A가 출연해야만 B가 출현할 수 있고, A가 출연하지 않는다면 B도 출연할 수 없다는 점이다.
  그렇기 때문에 위상정렬을 이용하여 이 문제를 해결할 수 있다.
  각 출연진들의 indegree값을 저장한 뒤, indegree의 값이 0인 node부터 차례대로 출연한다.
  만약 indegree가 0인 출연진들을 모두 다 보았는데, indegree의 값이 0이 아닌 출연진들이 남아있다면
  해당 출연진은 출연시킬 수 없는 경우다.
  따라서 이런경우에는 0을 출력하고
  그렇지 않은 경우에는 위상 정렬을 이용하여 찾은 출연 순서를 출력한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 987654321
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	int n, m;
	cin >> n >> m;
	vector<int> indegree(n + 1, 0);
	vector<vector<int>> adj(n + 1);
	for (int i = 0; i < m; i++) {
		int k, s, e;
		cin >> k >> s;
		for (int j = 1; j < k; j++) {
			cin >> e;
			adj[s].push_back(e);
			indegree[e]++;
			s = e;
		}
	}
	queue<int> q;
	for (int i = 1; i <= n; i++) {
		if (indegree[i] == 0) q.push(i);
	}
	
	vector<int> ans;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		ans.push_back(x);
		for (int next : adj[x]) {
			indegree[next]--;
			if (indegree[next] == 0) q.push(next);
		}
	}

	if (ans.size() != n) cout << "0\n";
	else {
		for (int i = 0; i < n; i++) cout << ans[i] << "\n";
	}
	return 0;
}
