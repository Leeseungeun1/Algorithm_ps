/*
  1647 - 도시 분할 계획
  우선 마을을 구성하는 각 집들이 연결되어 있어야 하므로 크루스칼 알고리즘을 이용하여 각 집들을 최소 유지비로 연결한다.
  그러면 마을이 하나의 tree의 형태로 이루어진다.
  하나의 마을에서 두 집을 연결하는 하나의 간선을 없애면, 마을이 두 마을로 분리된다.
  따라서 마을의 유지비를 최소로 하기 위해서는 하나의 큰 마을을 구성하는 간선 중, 가중치가(유지비가) 최대인 간선의 값을 빼주면 된다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 987654321
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int find(int a, vector<int>& parent) {
	if (parent[a] < 0) return a;
	return parent[a] = find(parent[a], parent);
}

void merge(int a, int b, vector<int>& parent) {
	int aRoot = find(a, parent);
	int bRoot = find(b, parent);
	if (aRoot == bRoot) return;
	if (parent[aRoot] < parent[bRoot]) {
		parent[aRoot] += parent[bRoot];
		parent[bRoot] = aRoot;
	}
	else {
		parent[bRoot] += parent[aRoot];
		parent[aRoot] = bRoot;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int m, n;
	cin >> m >> n;
	vector<piii> edge;
	vector<int> parent(m + 1, -1);
	int a, b, w;
	for (int i = 0; i < n; i++) {
		cin >> a >> b >> w;
		edge.push_back({ w, {a,b} });
	}
	sort(edge.begin(), edge.end());
	
	priority_queue<int> pq;
	ll sum = 0;
	for (int i = 0; i < n; i++) {
		int e1 = find(edge[i].second.first, parent);
		int e2 = find(edge[i].second.second, parent);
		if (e1 == e2) continue;
		merge(edge[i].second.first, edge[i].second.second, parent);
		sum = sum + edge[i].first;
		pq.push(edge[i].first);
	}
	cout << sum - pq.top() << "\n";
	return 0;
}
