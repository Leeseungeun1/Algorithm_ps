/*
  1922 - 네트워크 연결
  이 문제를 간선들을 이용하여 MST를 구성하여 해결할 수 있다.
  크루스칼 알고리즘을 이용하여 MST를 찾아내고, 간선의 사용 가능 여부를 확인하기 위해서 union & find를 사용했다.
  만약 같은 집합에 있는 두 정점을 연결하는 간선을 사용하게 되면, 해당 graph는 cycle이 되므로 MST를 구성할 수 없다.
  간선의 수가 작아서 배열을 이용하여 sorting을 했지만, priority_queue를 이용하면 sorting을 하지 않아도 된다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
vector<int> parent;

int find(int a) {
	if (parent[a] < 0) return a;	
	return parent[a]=find(parent[a]);
}

void merge(int a, int b) {
	int aRoot = find(a);
	int bRoot = find(b);
	if (aRoot == bRoot) return;
	if (parent[aRoot] < parent[bRoot]) {
		parent[aRoot] += parent[bRoot];
		parent[bRoot] = aRoot;
	}
	else {
		parent[bRoot] += parent[aRoot];
		parent[aRoot] = bRoot;
	}
}
bool cmp(piii a, piii b) {
	return a.first < b.first;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;
	vector<piii> edge;
	for (int i = 0; i < m; i++) {
		int a, b, c;
		cin >> a >> b >> c;
		edge.push_back({ c, {a,b} });
	}
	sort(edge.begin(), edge.end(), cmp);
	parent.resize(n + 1, -1);
	
	ll sum = 0;
	for (int i = 0; i < m; i++) {
		int first = edge[i].second.first;
		int second = edge[i].second.second;
		if (find(first) == find(second)) continue;
		merge(first, second);
		sum += edge[i].first;
	}
	cout << sum;
	return 0;
}
