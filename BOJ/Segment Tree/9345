/*
  9345-DVD
  segment tree를 해당 구역에 저장 된 최솟값과 최댓값을 저장하는 segment tree로 정의하여 문제를 해결할 수 있다.
  만약 (1, 3) 구역에 원하는 dvd가 있는지 확인하는 경우를 생각 해 보자.
  이 때 해당 구역에 해당하는 최솟값과 최댓값이 (2,3), (0,3), (1,4), (1,2) 등이 된다면 1, 2, 3만 해당 구역에 있는 것이 아니라는 의미가 된다.
  (1, 2, 3 이외의 값이 해당 구역안에 있게 되면 최댓값이나 최솟값 둘 중 하나가 무조건 다르게 된다.)
  따라서 이런 경우에는 원하는 dvd가 없다는 것을 의미하므로 no를 출력하면 된다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

vector<pii> tree;
vector<int> arr;

pii init(int index, int start, int end) {
	if (start == end) {
		tree[index] = { arr[start], arr[start] };
	}
	else {
		int mid = (start + end) / 2;
		pii ret1 = init(2 * index, start, mid);
		pii ret2 = init(2 * index + 1, mid + 1, end);
		tree[index] = { min(ret1.first, ret2.first), max(ret1.second, ret2.second) };
	}
	return tree[index];
}

void update(int index, int start, int end, int idx, int x) {
	if (start == end) {
		tree[index] = { x,x };
	}
	else {
		int mid = (start + end) / 2;
		if (idx <= mid) update(2 * index, start, mid, idx, x);
		else update(2 * index + 1, mid + 1, end, idx, x);
		tree[index].first = min(tree[2 * index].first, tree[2 * index + 1].first);
		tree[index].second = max(tree[2 * index].second, tree[2 * index + 1].second);
	}
}

pii find_minmax(int index, int start, int end, int left, int right) {
	if (end < left || right < start) return{ 987654321, -987654321 };
	if (left <= start && end <= right) return tree[index];
	int mid = (start + end) / 2;
	pii ret1 = find_minmax(2 * index, start, mid, left, right);
	pii ret2 = find_minmax(2 * index + 1, mid + 1, end, left, right);
	return { min(ret1.first,ret2.first), max(ret1.second, ret2.second) };
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		int h = ceil(log2(n));
		tree.resize(1 << (h + 1), { 0,0 });
		arr.resize(n + 1, 0);
		for (int i = 1; i <= n; i++) arr[i] = i;
		
		init(1, 1, n);
		int a, b, c;
		while (m--) {
			cin >> a >> b >> c;
			if (a == 1) {
				pii ret = find_minmax(1, 1, n, b + 1, c + 1);
				if (ret.first == b + 1 && ret.second == c + 1) cout << "YES\n";
				else cout << "NO\n";
			}
			else {
				int temp = arr[b + 1];
				arr[b + 1] = arr[c + 1];
				arr[c + 1] = temp;
				update(1, 1, n, b + 1, arr[b + 1]);
				update(1, 1, n, c + 1, arr[c + 1]);
			}
		}
	}
	return 0;
}
