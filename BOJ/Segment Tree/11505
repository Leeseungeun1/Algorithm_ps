/*
  11505-구간 곱 구하기
  이 문제는 segment tree를 해당하는 구간의 원소의 곱을 1,000,000,007로 나눈 나머지를 저장하는 tree로 정의하여
  문제를 해결하면 된다.
  만약 a의 값이 1로 들어온다면 update함수를 수행하고,
  a의 값이 2로 들어온다면 각 구간의 곱을 구하는 함수인 find_mul을 수행한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

ll* tree;
vector<ll> arr;
ll mod = 1000000007;

ll init(int index, int start, int end) {
	if (start == end) tree[index] = arr[start];
	else {
		int mid = (start + end) / 2;
		tree[index] = (init(2 * index, start, mid) * init(2 * index + 1, mid + 1, end)) % mod;
	}
	return tree[index];
}

void update(int index, int start, int end, int idx, int x) {
	if (start == end) {
		tree[index] = x;
	}
	else {
		int mid = (start + end) / 2;
		if (idx <= mid) update(2 * index, start, mid, idx, x);
		else update(2 * index + 1, mid + 1, end, idx, x);
		tree[index] = (tree[2 * index] * tree[2 * index + 1]) % mod;
	}
}

ll find_mul(int index, int start, int end, int left, int right) {
	if (end < left || right < start) return 1;
	if (left <= start && end <= right) return tree[index];
	int mid = (start + end) / 2;
	return (find_mul(2 * index, start, mid, left, right) * find_mul(2 * index + 1, mid + 1, end, left, right)) % mod;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m, k;
	cin >> n >> m >> k;
	arr.resize(n + 1);
	for (int i = 1; i <= n; i++) cin >> arr[i];
	
	ll h = ceil(log2(n));
	tree = new ll[1 << (h + 1)];
	init(1, 1, n);

	int a, b, c;
	for (int i = 0; i < m + k; i++) {
		cin >> a >> b >> c;
		if (a == 1) {
			update(1, 1, n, b, c);
		}
		else {
			cout << find_mul(1, 1, n, b, c) << "\n";
		}
	}
	return 0;
}
