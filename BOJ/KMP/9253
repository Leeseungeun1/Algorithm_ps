/*
  9253 - 스페셜 저지
  맨 마지막에 주어진 문자열이 첫 번쨰 문자열, 두 번째 문자열 안에 있는지 여부를 확인하는 문제다.
  확인할 때, 시간을 단축하기 위해서 KMP 알고리즘을 이용한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 1000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	string A, B, ans;
	getline(cin, A);
	getline(cin, B);
	getline(cin, ans);

	// 실패함수 만들기
	int anssize = ans.size();
	vector<int> fail(anssize, 0);
	for (int i = 1, j = 0; i < anssize; i++) {
		while (j > 0 && ans[i] != ans[j]) j = fail[j - 1];
		if (ans[i] == ans[j]) fail[i] = ++j;
	}

	bool find = false;
	//A에서 찾기
	int asize = A.size();
	for (int i = 0, j = 0; i < asize; i++) {
		while (j > 0 && A[i] != ans[j]) j = fail[j - 1];
		if (A[i] == ans[j]) {
			if (j == anssize - 1) {
				find = true;
				j = fail[j];
			}
			else j++;
		}
	}
	if (!find) {
		cout << "NO";
		return 0;
	}

	find = false;
	//B에서 찾기
	int bsize = B.size();
	for (int i = 0, j = 0; i < bsize; i++) {
		while (j > 0 && B[i] != ans[j]) j = fail[j - 1];
		if (B[i] == ans[j]) {
			if (j == anssize - 1) {
				find = true;
				j = fail[j];
			}
			else j++;
		}
	}
	if (find) cout << "YES";
	else cout << "NO";
	return 0;
}
