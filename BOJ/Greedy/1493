/*
  1493-박스 채우기
  이 문제는 greedy와 분할 정복을 이용하여 해결하는 문제다.
  이 문제에서 사용되는 greedy한 부분은 '최대 큐브를 먼저 이용하여 박스를 채운다'라는 부분이고,
  분할 정복을 이용하는 부분은 '박스의 한 부분을 채우면, 남은 공간을 세 공간으로 분할하여 다시 같은 과정을 반복한다'라는 부분이다.
  
  이 코드는 가장 크기가 큰 큐브부터 하나씩 박스에 배치한 뒤, 남은 공간을 3등분을 한다.
  그리고 그 3등분한 각각의 구역에서 다시 크기가 큰 큐브부터 하나씩 배치하는 과정을 거치면서 최소로 사용되는 큐브의 수를 구하는 코드다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>

using namespace std;
typedef long long ll;

ll cnt = 0;
bool possible = true;
void find_num(vector<pair<ll,ll>>& arr, ll w, ll l, ll h) {
	if (possible == false) return;
	if (w == 0 || l == 0 || h == 0) return;
	ll size = arr.size();

	for (ll i = 0; i < size; i++) {
		ll side = arr[i].first;
		if (side > w || side > l || side > h || arr[i].second == 0) continue;
		cnt++;
		arr[i].second--;
		find_num(arr, w, l, h - side);
		find_num(arr, side, l - side, side);
		find_num(arr, w - side, l, side);

		return;
	}
	possible = false;
}

bool cmp(pair<ll, ll> a, pair<ll, ll> b) {
	return a.first > b.first;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	ll l, w, h, n;
	cin >> l >> w >> h >> n;
	vector<pair<ll, ll>> arr(n);
	for (int i = 0; i < n; i++) {
		cin >> arr[i].first >> arr[i].second;
		arr[i].first = pow(2, arr[i].first);
	}

	sort(arr.begin(), arr.end(), cmp);
	find_num(arr, w, l, h);

	if (possible) cout << cnt;
	else cout << "-1\n";
	return 0;
}
