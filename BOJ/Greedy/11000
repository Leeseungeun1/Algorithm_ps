/*
  11000-강의실 배정
  이 문제는 1901-회의실 배정 문제와 유사한 문제다.
  이 문제 역시 시작시간이 빠른 수업부터 강의실을 우선 배정하는 방식을 이용하였다.
  그리고 현재 강의실을 사용중인 강의의 끝나는 시간을 정렬한 뒤, 다음으로 들어오는 강의가 현재 강의실을 사용중인 강의 중 제일 빨리 끝나는 강의가 끝난 뒤
  사용할 수 있는지 확인하는 과정을 거치는 방법을 이용하였다.
  이 때, 정렬을 매 강의가 추가될 때마다 사용하게 된다면, 정렬에 nlogn이 걸리고, 각 원소에 대해서 정렬을 수행해야하므로 n^2logn이라는 시간이 걸린다.
  따라서 시간을 더 줄이기 위해서 priority_queue를 이용하여, 정렬하는 시간을 logn으로 줄여서 해결하였다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>

using namespace std;

typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N;
	cin >> N;
	
	vector<pair<int, int>> arr(N);
	for (int i = 0; i < N; i++) {
		cin >> arr[i].first >> arr[i].second;
	}

	priority_queue<int, vector<int>, greater<int>> pq;
	sort(arr.begin(), arr.end());
	int num = 1;
	pq.push(arr[0].second);
	for (int i = 1; i < N; i++) {
		if (pq.top() > arr[i].first) num++;
		else pq.pop();
		pq.push(arr[i].second);
	}

	cout << num;
	return 0;
}
