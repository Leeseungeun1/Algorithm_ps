/*
  2211 - 네트워크 복구
  1번 컴퓨터에서 다른 컴퓨터로 도달할 수 있는 최단 시간을 구한다.
  이 때, 최단 시간으로 갱신될 때 이전에 경유하는(?) 컴퓨터 번호를 저장한다.
  다익스트라 알고리즘을 이용하여 최단시간을 모두 구하면 저장 된 경유 컴퓨터 번호를 이용하여
  back-tracking을 진행한다.
  그리고 back=tracking으로 찾은 복구 전선을 저장 후 출력한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 100000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m;
	cin >> n >> m;
	vector<vector<pii>> dist(n + 1);
	vector<pii> dijk(n + 1, { 1e9, -1 });
	int a, b, c;
	while (m--) {
		cin >> a >> b >> c;
		dist[a].push_back({ b,c });
		dist[b].push_back({ a,c });
	}
	
	dijk[1] = { 0,-1 };
	priority_queue<pii> q;
	q.push({ 0,1 });

	while (!q.empty()) {
		int p = q.top().second;
		int d = -q.top().first;
		q.pop();
		for (auto x : dist[p]) {
			int nextp = x.first;
			int nextd = x.second;
			if (d + nextd < dijk[nextp].first) {
				dijk[nextp].first = d + nextd;
				dijk[nextp].second = p;
				q.push({ -dijk[nextp].first, nextp });
			}
		}
	}

	vector<bool> visited(n + 1, false);
	visited[1] = true;
	vector<pii> ans;
	for (int i = 2; i <= n; i++) {
		int cur = i;
		int next = dijk[i].second;
		while (!visited[cur] && dijk[cur].second != -1) {
			visited[cur] = true;
			ans.push_back({ cur, next });
			cur = next;
			next = dijk[cur].second;
		}
	}
	cout << ans.size() << "\n";
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i].first <<" "<< ans[i].second << "\n";
	}

	return 0;
}
