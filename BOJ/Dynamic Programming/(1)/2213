/*
  2213-트리의 독립집합
  우선, 이 문제를 해결하기 위해서 각 node의 포함 여부를 따지면서 가중치 계산을 해야한다.
  먼저 root node를 잡고 dfs기법을 이용하여 자식 node를 살펴본다.
  자식 node에서는 자식이 포함될 때의 가중치와 자식이 포함되지 않을 때의 가중치를 계산한 뒤, 부모 node로 넘어간다.
  그리고 부모 node에서도 계속해서 같은 작업을 반복하면서 최종적으로 최대 가중치를 계산한다.
  최대 가중치를 계산한 뒤에는 다시 root node부터 어떤 node를 포함해야하는지 살펴봐야한다.
  가중치를 계산할 때 계속 최댓값을 이용했기 때문에,
  각 node 별로 포함될 때와 포함되지 않을 때의 가중치를 비교하여, 포함됐을 때의 가중치가 더 높은 경우 해당 node를 독립집합에 포함하면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, pair<int, int>> piii;

void dfs(vector<int>& node, vector<bool>& visited, vector<vector<int>>& adj, int num, vector<vector<int>>& score) {
	visited[num] = true;
	
	for (auto n : adj[num]) {
		if (visited[n] == false) {
			dfs(node, visited, adj, n, score);
			score[num][0] += max(score[n][0], score[n][1]);
			score[num][1] += score[n][0];
		}
	}
	score[num][1] += node[num];
}

void find_num(vector<bool>& visited, vector<vector<int>>& adj, int num, vector<vector<int>>& score, bool include, vector<int>& ans) {
	visited[num] = true;
	
	for (auto n : adj[num]) {
		if (visited[n] == false) {
			if (include) {
				find_num(visited, adj, n, score, false, ans);
			}
			else {
				if (score[n][1]>score[n][0]) {
					find_num(visited, adj, n, score, true, ans);
					ans.push_back(n);
				}
				else {
					find_num(visited, adj, n, score, false, ans);
				}
			} 
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<int> node(n + 1);
	vector<bool> visited(n + 1);
	vector<vector<int>> adj(n + 1);
	vector<vector<int>> score(n + 1, vector<int>(2));
	for (int i = 1; i <= n; i++) {
		cin >> node[i];
		visited[i] = false;
		score[i][0] = score[i][1] = 0;
	}

	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	
	dfs(node, visited, adj, 1, score);
	cout << max(score[1][0], score[1][1])<<"\n";
	
	for (int i = 1; i <= n; i++) {
		visited[i] = false;
	}

	vector<int> ans;
	if (score[1][0] > score[1][1]) find_num(visited, adj, 1, score, false, ans);
	else {
		find_num(visited, adj, 1, score, true, ans);
		ans.push_back(1);
	}
	sort(ans.begin(), ans.end());
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i] << " ";
	}
	cout << "\n";

	return 0;
}
