/*
  2193-이친수
  이 문제의 첫 번째 조건에 의해 이친수는 모두 1로 시작함을 알 수 있다.
  그리고 n-1자리의 이친수 중 0으로 끝나면 그 이후에는 0과 1을, 
  이친수 중 1로 끝나면 그 이후에는 0을 붙일 수 있다.
  따라서 이렇게 되면 n자리 이친수의 수는
  0으로 끝나는 경우: n-1자리의 0으로 끝나는 이친수의 개수 + n-1자리의 1로 끝나는 이친수의 개수
  1로 끝나는 경우: n-1자리의 0으로 끝나는 이친수의 개수
  로 점화식이 세워짐을 알 수 있다.
  따라서 이 점화식을 이용하게 된다면 dynamic programming 기법으로 문제를 해결할 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<vector<ll>> arr(n + 1, vector<ll> (2));

	arr[1][0] = 0;
	arr[1][1] = 1;
	for (int i = 2; i <= n; i++) {
		arr[i][0] = arr[i - 1][0] + arr[i - 1][1];
		arr[i][1] = arr[i - 1][0];
	}

	cout << arr[n][0] + arr[n][1];
	return 0;
}
