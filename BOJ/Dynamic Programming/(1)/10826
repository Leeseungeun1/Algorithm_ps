/*
  10826-피보나치수 4
  피보나치의 수를 주어진 시간 안에 풀기 위해서는 f_n-1의 값과 f_n-2의 값을 배열에 저장 해 두고,
  두 배열의 값을 이용하여 f_n의 값을 구하면 된다.
  f_10000의 값은 굉장히 커서 long long 타입으로도 커버가 되지 않는다.
  따라서 이 문제를 해결하기 위해서 배열을 사용했다.
  각 자리수를 배열의 한 인덱스에 저장하고, 각 인덱스별로 연산을 진행하는 방식으로 큰 수의 덧셈 연산을 해결했다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	ll n;
	cin >> n;
	vector<vector<int>> arr(10001, vector<int>(3001));
	arr[0][0] = 1;
	arr[0][3000] = 0;
	arr[1][0] = 1;
	arr[1][3000] = 1;
	
	int carry, s1, s2, num1, num2, l1, l2, sum;
	for (int i = 2; i <= n; i++) {
		carry = 0;
		s1 = 3000;
		l1 = 3001 - arr[i - 1][0];
		s2 = 3000;
		l2 = 3001 - arr[i - 2][0];
		sum = 0;
		while (s1 >= l1 || s2 >= l2) {
			if (s1 >= l1) num1 = arr[i - 1][s1--];
			else num1 = 0;
			if (s2 >= l2) num2 = arr[i - 2][s2--];
			else num2 = 0;

			arr[i][3000 - sum] = (num1 + num2 + carry) % 10;
			carry = (num1 + num2 + carry) / 10;
			sum++;
		}
		if (carry != 0) {
			arr[i][3000-sum] = carry;
			sum++;
		}
		arr[i][0] = sum;
	}
	int start = 3001 - arr[n][0];
	for (int i = start; i < 3001; i++) cout << arr[n][i];
	return 0;
}
