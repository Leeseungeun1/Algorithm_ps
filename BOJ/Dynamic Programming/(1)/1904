
/*
  1904 - 01타일
  이 문제는 다음과 같은 두 경우를 생각할 수 있다.
    1. i번째 자리에 0이 온다면, i+1번쨰 자리에는 무조건 0이 오고, i+2번쨰 자리에는 0 또는 1이 올 수 있다.
    2. i번째 자리에 1이 온다면, i+1번쨰 자리에는 0 또는 1이 올 수 있다.
  따라서 다음과 같은 두 점화식이 세워질 수 있다.
    dp[i][0] = (dp[i + 2][0] + dp[i + 2][1]) % mod;
		dp[i][1] = (dp[i + 1][0] + dp[i + 1][1]) % mod;
    (dp[i][j] : i번째 자리에 숫자 j가 오는 경우의 수)
  따라서 이 점화식을 이용하여 문제를 해결할 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 15746
#define modulo 1000000007
#define INF 1000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;


int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<vector<int>> dp(n, vector<int>(2, 0));
	dp[n - 1][0] = 0, dp[n - 1][1] = 1;
	if (n != 1)dp[n - 2][0] = 1, dp[n - 2][1] = 1;

	for (int i = n - 3; i >= 0; i--) {
		dp[i][0] = (dp[i + 2][0] + dp[i + 2][1]) % mod;
		dp[i][1] = (dp[i + 1][0] + dp[i + 1][1]) % mod;
	}

	cout << (dp[0][0] + dp[0][1]) % mod;

	return 0;
}
