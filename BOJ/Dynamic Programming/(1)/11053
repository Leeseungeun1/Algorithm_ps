/*
  11053-가장 긴 증가하는 부분수열
  arr[0]부터 arr[i]까지의 증가하는 부분 수열을 구하는 방법은,
  arr[0]부터 arr[i-1]까지 값 중에 arr[i]보다 작은 값이 있다면, 해당 값 뒤에 arr[i]를 배치하면 된다.
  따라서 이 문제를 부분문제로 쪼갤 수 있게 되는 것이다.
  각 arr[i]가 부분 수열에서 최댓값이라고 가정을 하고, 해당 값이 최댓값일 때 만들 수 있는 부분 수열 중 가장 긴 값을 구한다.
  그렇게 모든 index에 대해서 가장 긴 값을 구했으면, 전체 배열을 순회하면서 전체 수열의 부분 수열 중 가장 긴 증가하는 부분수열의 길이를 찾으면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<vector<int>> arr(n, vector<int>(2));
	for (int i = 0; i < n; i++) {
		cin >> arr[i][0];
		arr[i][1] = 1;
	}
	for (int i = 0; i < n; i++) {
		int maximum = 1;
		for (int j = 0; j < i; j++) {
			if (arr[j][0] < arr[i][0]) {
				maximum = max(maximum, arr[j][1] + 1);
			}
		}
		arr[i][1] = maximum;
	}
	int ans = 0;
	for (int i = 0; i < n; i++) {
		ans = max(ans, arr[i][1]);
	}
	cout << ans;
	return 0;
}
