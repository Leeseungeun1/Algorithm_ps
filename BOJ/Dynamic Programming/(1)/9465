/*
  9465-스티커
  만약 스티커가 (0, j)열에 있다면,
  (0,j) 점수 + max((1,j-1) 점수, (0, j-2) 점수, (1, j-2) 점수) 값이 (0,j)의 값으로,
  스티커가 (1, j)열에 있다면,
  (1,j) 점수 + max((0,j-1) 점수, (0, j-2) 점수, (1, j-2) 점수) 값이 (1,j)의 값으로 된다.
  따라서 이 점화식을 이용하여 제일 좌측의 2*2의 값을 base case로 잡은 후 dp를 진행하여 문제를 해결한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int t;
	cin >> t;
	while (t--) {
		int N;
		cin >> N;
		vector<vector<int>> arr(2, vector<int>(N));
		vector<vector<int>> dp(2, vector<int>(N));
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < N; j++) {
				cin >> arr[i][j];
				dp[i][j] = 0;
			}
		}

		dp[0][0] = arr[0][0];
		dp[1][0] = arr[1][0];
		dp[1][1] = dp[0][0] + arr[1][1];
		dp[0][1] = dp[1][0] + arr[0][1];

		for (int j = 2; j < N; j++) {
			for (int i = 0; i < 2; i++) {
				int res = arr[i][j] + dp[(i + 1) % 2][j - 1];
				res = max(res, arr[i][j] + dp[(i + 1) % 2][j - 2]);
				res = max(res, arr[i][j] + dp[(i + 2) % 2][j - 2]);
				dp[i][j] = res;
			}
		}
		int maximum = 0;
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < N; j++) {
				if (dp[i][j] > maximum) maximum = dp[i][j];
			}
		}
		cout << maximum<<"\n";
	}
	return 0;	
}
