/*
  2248-이진수 찾기
  우선 이 문제는 1이 시작되는 위치에 따라 1의 개수마다 몇 개의 이진수가 나올 수 있는지 확인한다. (가장 오른쪽이 1번째, 가장 왼쪽이 n번째)
  그리고 i번째에서 1이 시작되는 이진수 중 1이 j개 사용 된 이진수의 개수를 arr[i][j]에 저장한다.
  이 경우에 예시로, 5번째에서 1이 시작되는 이진수 중 1이 2개 사용 된 이진수는 다음의 경우가 있다.
    1. 5번째에서 1이 나오고, 4번째에서 1이 나오는 경우(arr[4][1])
    2. 5번째에서 1이 나오고, 3번쨰에서 1이 나오는 경우(arr[3][1])
    3. 5번째에서 1이 나오고, 2번째에서 1이 나오는 경우(arr[2][1])
    4. 5번째에서 1이 나오고, 1번째에서 1이 나오는 경우(arr[1][1])
  따라서 이 네가지 경우를 합해주면 arr[5][2]의 값이 나온다.
  
  이 arr값을 이용하여 새로운 배열 dp를 정의한다.
  dp[i]는 i번째 자리에 1이 하나만 나올 때, 해당 이진수가 i-1번째 자리에 1이 하나만 나온 이후 몇 번째 이진수에 해당하는지를 의미한다.
  그러면 이 dp를 이용하여 1이 어디에 배치되어야하는지를 알 수 있다.
  예를 들어 n=5, l=3, i=10이 들어오는 경우,
  dp[1]부터 dp[4]까지의 합이 8이고, dp[1]부터 dp[5]까지의 합이 15기 때문에 1이 네 번째 자리에 무조건 나와야 함을 알 수 있다.
  그러면 그 이후에는 n=5, l=2, i=2로 값을 변경하여 다음에 나오는 1을 찾아주면 된다.
  이 과정을 통해서 원하는 이진수를 찾을 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	ll n, m, l;
	cin >> n >> m >> l;
	vector<vector<ll>> arr(n + 1, vector<ll>(m + 1, 0));
	vector<ll> dp(n + 1, 0);

	for (ll i = 1; i <= n; i++) arr[i][1] = 1;
	for (ll i = 1; i <= m; i++) arr[i][i] = 1;

	for (ll i = 2; i <= n; i++) {
		for (ll j = 2; j <= min(i, m); j++) {
			ll add = 0;
			for (ll k = 1; k <= i - 1; k++) {
				add += arr[k][j - 1];
			}
			arr[i][j] = add;
		}
	}

	ll sum = 0;
	for (ll i = 1; i <= n; i++) {
		for (ll j = 1; j <= min(i, m); j++) {
			sum += arr[i][j];
			if (j == 1) {
				dp[i] = sum;
				sum = 0;
			}
		}
	}

	ll i, j;
	string ans = "";
	for (i = 0; i < n; i++) ans = ans + "0";

	sum = 1;
	while (m != 0) {
		if (sum == l) break;
		
		for (i = 1; i <= n; i++) {
			sum += dp[i];
			if (l == sum) break;
			if (l < sum) {
				sum -= dp[i];
				i--;
				break;
			}
		}		
		if (i == n + 1) i = n;
		
		ans[n - i] = '1';
		m--;
		l = l - sum;
		sum = 0;

		for (ll i = 1; i <= n; i++) {
			dp[i] = dp[i] - arr[i - 1][m + 1];
		}
	}
	cout << ans;
	
	return 0;
}
