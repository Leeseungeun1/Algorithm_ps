/*
  9252-LCS 2
  arr[i][j]는 a문자열의 i-1번째 문자, 그리고 b문자열의 j-1번째 문자를 동시에 포인팅하고있을 때,
  그때까지의 LCS 길이를 나타낸다.
  따라서 어떤 a의 한 문자와 b의 어떤 한 문자를 비교하는데
  만약 두 문자의 값이 같다면 해당 a문자 이전 문자와 해당 b문자 이전 문자까지의 LCS 중에서 가장 긴 LCS의 값에 1을 더해준뒤 저장 해 준다.
  만약 두 문자의 값이 같지 않다면, 다음 LCS를 구하기 위해서 이전 LCS의 정보를 그대로 가져온다.
  그렇게 만약 maximum의 값을 구했다면 오른쪽 하단부터 maximum의 값과 arr에 저장 된 값을 확인하면서
  arr과 maximum에 저장 된 값이 같고, 해당 index의 a문자와 b문자의 값이 같다면 해당 문자를 저장하는 방식으로 LCS의 정보를 찾으면서 문제를 해결한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string a, b;
	cin >> a >> b;
	int asize = a.size();
	int bsize = b.size();
	vector<vector<int>> arr(asize + 1, vector<int>(bsize + 1, 0));
	
	int maximum = 0;
	for (int i = 1; i <= bsize; i++) {
		if (a[0] == b[i - 1]) arr[1][i] = 1;	
		else arr[1][i] = 0;
		maximum = max(maximum, arr[1][i]);
	}

	for (int i = 2; i <= asize; i++) {
		int beforemax = arr[i - 1][0];
		for (int j = 1; j <= bsize; j++) {
			beforemax = max(beforemax, arr[i - 1][j - 1]);
			if (a[i - 1] == b[j - 1]) arr[i][j] = beforemax + 1;
			else arr[i][j] = arr[i - 1][j];
			maximum = max(maximum, arr[i][j]);
		}
	}

	cout << maximum << "\n";
	stack<char> s;

	int i = asize, j = bsize;
	while (maximum != 0) {
		j = bsize;
		while (j > 0) {
			if (arr[i][j] == maximum && a[i - 1] == b[j - 1]) {
				s.push(a[i - 1]);
				maximum--;
				break;
			}
			j--;
		}
		i--;
	}
	
	while (!s.empty()) {
		cout << s.top();
		s.pop();
	}
	return 0;
}
