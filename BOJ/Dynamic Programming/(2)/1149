/*
  1149-RGB 거리
  i번째 집의 색깔은 이전에 칠해진 색에 의존을 한다.
  따라서 R로 칠하는 비용을 저장하는 index를 0, G로 칠하는 비용을 저장하는 index를 1, B로 칠하는 비용을 저장하는 index를 2라고 한다면 다음 점화식이 성립한다.
    dp[i][j]=min(dp[i-1][j-1], dp[i-1][j+1])+color[i][j];
  j색깔을 제외한 다른 색깔로 i-1 번째 집을 색칠하는 최솟값에 현재 집을 j색깔로 칠하는 비용을 더한 값이 i번째에 j색깔로 칠하는 최소 비용이 된다.
  이 점화식을 이용하여 n번째 집까지 색칠하는데 드는 최소 비용을 구할 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;
	vector<vector<int>> color(n, vector<int>(3, 0));
	vector<vector<int>> dp(n, vector<int>(3, 0));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 3; j++) cin >> color[i][j];
	}

	for (int i = 0; i < 3; i++) {
		dp[0][i] = color[0][i];
	}

	for (int i = 1; i < n; i++) {
		for (int j = 0; j < 3; j++) {
			dp[i][j] = min(dp[i - 1][(j + 1) % 3], dp[i - 1][(j + 2) % 3]) + color[i][j];
		}
	}

	cout << min(dp[n - 1][0], min(dp[n - 1][1], dp[n - 1][2]));
	return 0;
}
