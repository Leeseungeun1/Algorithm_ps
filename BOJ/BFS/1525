/*
  1525-퍼즐
  이 문제에서 0이 인접한 구역과 자리를 바꿀 수 있다고 했기 때문에 BFS를 이용하여 해결했다.
  우선 숫자의 배치를 (0,0)부터 (2,2)까지 차례대로 string에 저장한다.
  그리고 visited 배열을 따로 만들 수 없기 때문에 set을 이용하여 이미 나온 숫자의 배열인지 여부를 확인하는 과정을 거친다.
  그리고 0과 자리 바꿀 수 있는 다른 숫자의 위치를 바꾸면서 123456780의 숫자 배치가 나올 수 있는지 여부를 확인한다.
  만약 k단계에서 123456780의 배치를 찾게 된다면, 그것은 처음으로부터 0을 k번 이동했다는 뜻이므로, 해당 단계를 출력하면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;

int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,-1,0,1 };
int bfs(vector<vector<int>>& arr) {
	set<string> s;
	string str = "";
	string ans = "123456780";
	int x, y;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (arr[i][j] == 0) {
				x = i;
				y = j;
			}
			char c = arr[i][j] + '0';
			str = str + c;
		}
	}
	s.insert(str);
	queue<pair<string, pair<int, int>>> q;
	q.push({ str, {x, y} });

	int cnt = 0;
	bool finish = false;
	while (!q.empty()) {
		int size = q.size();
		while (size--) {
			str = q.front().first;
			x = q.front().second.first;
			y = q.front().second.second;
			q.pop();
			if (str == ans) finish = true;
			for (int i = 0; i < 4; i++) {
				if (0 <= x + dx[i] && x + dx[i] < 3 && 0 <= y + dy[i] && y + dy[i] < 3) {
					string temp = str;
					int otherindex = (x + dx[i]) * 3 + (y + dy[i]);
					int zeroindex = x * 3 + y;
					temp[zeroindex] = temp[otherindex];
					temp[otherindex] = '0';
					if (s.find(temp) == s.end()) {
						s.insert(temp);
						q.push({ temp, {x + dx[i], y + dy[i]} });
					}
				}
			}
		}
		if (finish) break;
		cnt++;
	}

	if (finish) return cnt;
	else return -1;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	vector<vector<int>> arr(3, vector<int>(3));
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cin >> arr[i][j];
		}
	}
	cout << bfs(arr);
	return 0;
}
