/*
  1327-소트게임
  처음 배열에 있는 수부터 뒤에서 K번째 자리에 있는 수까지 차례대로 선택했을 때, 나올 수 있는 배열을 모두 확인하는 문제다.
  이 문제는 따로 visited배열을 생성하여 방문처리를 하기가 어렵다.
  따라서 set을 이용하여 해당 문자열이 지금까지 탐색을 하면서 나왔는지 여부를 확인 해 주면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> piii;

set<string> s;
int BFS(string str, string ans, int k) {
	int ret = 0;
	queue<string> q;
	q.push(str);

	int cnt = 0;
	char c;
	bool success = false;
	while (!q.empty()) {
		int size = q.size();
		while (size--) {
			string temp = q.front();
			if (temp == ans) success = true;
			q.pop();
			int strsize = temp.size();
			for (int i = 0; i + k <= strsize; i++) {
				string cpy = temp;
				int end = i + k;
				reverse(cpy.begin() + i, cpy.begin() + end);
				if (s.find(cpy) == s.end()) {
					s.insert(cpy);
					q.push(cpy);
				}
			}
		}
		if (success) break;
		cnt++;
	}
	if (success) return cnt;
	else return -1;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k, num;
	char c;
	cin >> n >> k;
	string str = "";
	for (int i = 0; i < n; i++) {
		cin >> num;
		c = num + '0';
		str = str + c;
	}
	string ans = "";
	for (int i = 1; i <= n; i++) {
		c = i + '0';
		ans = ans + c;
	}
	cout << BFS(str, ans, k);
	return 0;
}
