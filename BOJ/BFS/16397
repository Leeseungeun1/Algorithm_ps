/*
  16397-탈출
  이 문제는 digit이 어떻게 변할 수 있는지를 BFS로 탐색하여 해결할 수 있다.
  A버튼을 눌렀을 때와 B버튼을 눌렀을 때 변경 된 digit가 조건을 만족하는지 우선 확인 한다.
  그리고 digit가 만약 G의 값과 같다면, 해당 값까지 몇 단계에 걸쳐 갈 수 있는지 확인한다.
  단계가 T보다 크다면, 주어진 조건 하에 탈출할 수 없다는 것을 의미하므로 이 경우에는 탈출할 수 없다고 표시한다.
  그리고 만약 digit가 G값과 같아질 수 없다면 이 역시 주어진 조건 하에 탈출할 수 없다는 것을 의미하므로 탈출할 수 없다고 표시한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int bfs(vector<bool>& visited, int N, int T, int G) {
	visited[N] = true;
	queue<int> q;
	q.push(N);

	int cnt = 0;
	bool findflag = false;
	while (!q.empty()) {
		int size = q.size();
		while (size--) {
			int cur = q.front();
			if (cur == G) findflag = true;
			q.pop();
			if (0 <= cur + 1 && cur + 1 < 100000) {
				if (visited[cur + 1] == false) {
					visited[cur + 1] = true;
					q.push(cur + 1);
				}
			}
			if (cur == 0) continue;
			if (0 <= 2 * cur && 2 * cur < 100000) {
				int temp = 2 * cur;
				int num = 0;
				while (temp != 0) {
					temp = temp / 10;
					num++;
				}
				num--;
				int ten = 1;
				while (num--) ten = ten * 10;
				temp = 2 * cur - ten;
				if (0 <= temp && temp < 100000) {
					if (visited[temp] == false) {
						visited[temp] = true;
						q.push(temp);
					}
				}
			}
		}
		if (findflag) break;
		cnt++;
	}
	if (findflag == false || cnt > T) return -1;
	else return cnt;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N, T, G;
	cin >> N >> T >> G;
	vector<bool> visited(100001);
	for (int i = 0; i < 100001; i++) visited[i] = false;

	int res = bfs(visited, N, T, G);
	if (res == -1) cout << "ANG";
	else cout << res;
	return 0;
}
