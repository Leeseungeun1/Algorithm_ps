/*
  5427-불
  우선 이 문제에서 상근이는 불이 옮겨질 자리로 이동을 할 수 없기 때문에
  항상 불이 우선 이동을 하고, 상근이가 이동을 하는 방식으로 BFS를 진행한다.
  그리고 또 불이 이미 옮겨 붙은 자리는 또 불이 옮겨붙을 수 없으므로, 상근이 뿐만 아니라 불에도 visited변수를 두어 무한 루프가 생기는 일이 없도록 방지한다.
  불은 벽이외에는 모두 옮겨붙을 수 있다는 점을 이용하여 불이 옮겨 붙을 수 있는 장소를 우선 파악한다.
  그리고 상근이가 불이 옮겨질 장소를 알기 위해서 불이 옮겨질 장소의 값을 *로 바꾼다.
  불이 다 옮겨진 이후에는 상근이가 이동을 시작한다.
  상근이는 #이나 *로 표시 된 구역을 제외하고는 모두 이동을 할 수 있으므로, .으로 표시된 부분으로 이동하며 BFS를 진행한다.
  이 과정을 통해서 상근이가 탈출할 수 있는지, 만약 탈출한다면 몇 단계에 탈출하는지를 파악하여 상근이가 탈출하는데 걸리는 시간을 구한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;
int startx, starty;
int time = 0;

int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };
bool dfs(vector<vector<char>>& arr, int row, int col) {
	queue<pair<int, int>> fire;
	queue<pair<int, int>> person;
	vector<vector<bool>> visited(row, vector<bool>(col));
	vector<vector<bool>> fvisited(row, vector<bool>(col));
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			visited[i][j] = false;
			if (arr[i][j] == '*') {
				fire.push({ i,j });
				fvisited[i][j] = true;
			}
			else fvisited[i][j] = false;
		}
	}
	visited[startx][starty] = false;
	person.push({ startx, starty });

	bool ret = false;
	int cnt = 0;
	while (!person.empty()) {
		int size = fire.size();
		cnt++;
		while (size--) {
			int x = fire.front().first;
			int y = fire.front().second;
			fire.pop();
			for (int i = 0; i < 4; i++) {
				if (0 <= x + dx[i] && x + dx[i] < row && 0 <= y + dy[i] && y + dy[i] < col && arr[x+dx[i]][y+dy[i]]!='#') {
					if (fvisited[x + dx[i]][y + dy[i]] == false) {
						fire.push({ x + dx[i], y + dy[i] });
						arr[x + dx[i]][y + dy[i]] = '*';
						fvisited[x + dx[i]][y + dy[i]] = true;
					}
				}
			}
		}
		size = person.size();
		while (size--) {
			int x = person.front().first;
			int y = person.front().second;
			if (x == 0 || x == row - 1 || y == 0 || y == col - 1) {
				ret = true;
				time = cnt;
			}
			person.pop();
			for (int i = 0; i < 4; i++) {
				if (0 <= x + dx[i] && x + dx[i] < row && 0 <= y + dy[i] && y + dy[i] < col) {
					if (arr[x + dx[i]][y + dy[i]] == '.' && visited[x + dx[i]][y + dy[i]] == false) {
						visited[x + dx[i]][y + dy[i]] = true;
						person.push({ x + dx[i], y + dy[i] });
					}
				}
			}
		}
		if (ret) break;
	}
	return ret;
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		vector<vector<char>> arr(m, vector<char>(n));
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];
				if (arr[i][j] == '@') {
					startx = i;
					starty = j;
				}
			}
		}
		bool possible = dfs(arr, m, n);
		if (possible) cout << time << "\n";
		else cout << "IMPOSSIBLE\n";
	}
	return 0;
}
