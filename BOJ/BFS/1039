/*
  10339-교환
  각 단계별로 숫자를 바꾸었을 때, 나올 수 있는 수를 탐색하면서 문제를 해결할 수 있다.
  탐색하는 과정은 BFS로 구현이 된다.
  숫자의 자리수가 최대 6자리기 때문에, 각 i에 따를 가능한 j를 모두 다 따져볼 수 있다.
  이렇게 모든 자리수를 살펴보면서 K단계까지 각 단계마다 나올 수 있는 수를 살펴본다.
  이 때, visited 배열은 각 단계마다 초기화를 해 줘야한다.
  왜냐하면 1단계에서 1234라는 값이 나오고 또 2단계에서도 1234라는 값이 나올 수 있기 때문이다.
  그리고 K번 연산이 완료되기도 전에 더 이상 연산을 할 수 있는 수가 없다면, K번 연산이 아예 불가능한 수기 때문에 -1을 출력한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>

using namespace std;
typedef long long ll;

int calarr(vector<int>& arr) {
	int ten = 1;
	int ret = 0;
	int size = arr.size() - 1;
	for (int i = size; i >= 0; i--) {
		ret += arr[i] * ten;
		ten = ten * 10;
	}
	return ret;
}
void init_visited(vector<bool>& visited) {
	int size = visited.size();
	for (int i = 0; i < size; i++) visited[i] = false;
}
int bfs(vector<int>& arr, int K) {
	queue<int> q;
	q.push(calarr(arr));

	int arrsize = arr.size();
	vector<bool> visited(1000001);
	bool possible = true;
	int maximum = 0;
	for (int t = 1; t <= K; t++) {
		init_visited(visited);
		if (!possible) break;
		int size = q.size();
		while (size--) {
			int N = q.front();
			int temp = N;
			q.pop();
			int digit = 0;
			while (temp != 0) {
				digit++;
				temp /= 10;
			}
			for (int i = digit - 1; i >= 0; i--) {
				arr[i] = N % 10;
				N /= 10;
			}
			for (int i = 0; i < arrsize; i++) {
				for (int j = i+1; j < arrsize; j++) {
					if (i==0 && arr[j]==0) continue;
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
					int num = calarr(arr);
					if (visited[num] == false) {
						visited[num] = true;
						q.push(num);
						if (t == K) maximum = max(num, maximum);
					}
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		if (q.size() == 0) possible = false;
	}

	if (possible) return maximum;
	else return -1;
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N, K;
	cin >> N >> K;

	int temp = N;
	int digit = 0;
	while (temp != 0) {
		digit++;
		temp /= 10;
	}
	vector<int> arr(digit);
	for (int i = digit - 1; i >= 0; i--) {
		arr[i] = N % 10;
		N /= 10;
	}

	cout << bfs(arr, K);
	return 0;
}
