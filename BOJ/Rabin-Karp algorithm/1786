/*
  1786 - 찾기
  이 문제를 KMP 알고리즘을 이용하여 해결할 수도 있지만, 라빈 카프 알고리즘을 이용하여 해결할 수도 있다.
  라빈 카프 알고리즘 사용시에는 두 개의 hash 함수를 만들고,
  각 문자가 두 개의 hash 함수의 값과 같은지 확인하는 과정으로 문제를 해결할 수 있다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 1000000007
#define INF 1000000000
#define modulo 1000000007
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string P, T;
	getline(cin, T);
	getline(cin, P);

	int psize = P.size();
	int tsize = T.size();
	vector<ll> Thash2(tsize, 0);
	vector<ll> Thash3(tsize, 0);
	ll two = 1;
	ll three = 1;
	ll twoSum = 0;
	ll threeSum = 0;
	ll pTwo = 0;
	ll pThree = 0;
	for (int i = psize - 1; i >= 0; i--) {
		twoSum = (twoSum + two * T[i]) % modulo;
		threeSum = (threeSum + three * T[i]) % modulo;
		pTwo = (pTwo + two * P[i]) % modulo;
		pThree = (pThree + three * P[i]) % modulo;
		if (i != 0) {
			two = (two * 2) % modulo;
			three = (three * 3) % modulo;
		}
	}
	Thash2[0] = twoSum;
	Thash3[0] = threeSum;

	for (int i = psize; i < tsize; i++) {
		Thash2[i - psize + 1] = (Thash2[i - psize] - (T[i - psize] * two) % modulo) % modulo;
		if (Thash2[i - psize + 1] < 0) Thash2[i - psize + 1] += modulo;
		Thash2[i - psize + 1] = (((2 * Thash2[i - psize + 1]) % modulo) + T[i]) % modulo;
		Thash3[i - psize + 1] = (Thash3[i - psize] - (T[i - psize] * three) % modulo) % modulo;
		if (Thash3[i - psize + 1] < 0) Thash3[i - psize + 1] += modulo;
		Thash3[i - psize + 1] = (((3 * Thash3[i - psize + 1]) % modulo) + T[i]) % modulo;
	}

	vector<int> ans;
	for (int i = 0; i <= tsize - psize; i++) {
		if (Thash2[i] == pTwo && Thash3[i] == pThree) {
			ans.push_back(i + 1);
		}
	}

	int size = ans.size();
	cout << size << "\n";
	for (int i = 0; i < size; i++) {
		cout << ans[i] << " ";
	}
	return 0;
}
