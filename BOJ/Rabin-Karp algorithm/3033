/*
  3033 - 가장 긴 문자열
  가장 긴 문자열의 길이를 이분탐색을 이용하여 찾는다.
  그리고 라빈카프 알고리즘을 이용하여 이분탐색하는 길이로 문자열을 탐색했을 때, 두번 이상 나타나는지 살펴본다.
  살펴볼 때 해싱한 값으로 인덱싱 하기 위해서 우선 2로 해싱을 한 경우, 100003을 mod로 사용한다.
  그리고 문자열을 비교하는 과정을 생략하기 위해서 3으로 해싱을 하는 과정을 추가한다.
  이 때는 해싱의 충돌을 줄이기 위해서 더 큰 값인 1000000007을 mod로 사용한다.
  그리고 문자열을 살펴 볼 떄, 2로 해싱한 값과 3으로 해싱한 값 둘다 같은 경우가 존재하는지를 살펴보면서
  가장 긴 문자열의 길이를 찾는다.
*/
#define _CRT_SECURE_NO_WARNINGS
#define mod 100003
#define modulo 1000000007
#define INF 1000000000
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<char, int> pci;
typedef pair<int, pair<int, int>> piii;
typedef pair<ll, pair<ll, ll>> plll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;
	string s;
	cin >> s;

	vector<ll> hash2(n, 0);
	vector<ll> hash3(n, 0);
	
	int start = 1, end = n;
	while (start <= end) {
		int mid = (start + end) / 2;
		fill(hash2.begin(), hash2.end(), 0);
		fill(hash3.begin(), hash3.end(), 0);

		ll two = 1;
		ll three = 1;
		ll twoSum = 0;
		ll threeSum = 0;
		for (int i = mid - 1; i >= 0; i--) {
			twoSum = (twoSum + two * s[i]) % mod;
			threeSum = (threeSum + three * s[i]) % modulo;
			if (i != 0) {
				two = (two * 2) % mod;
				three = (three * 3) % modulo;
			}
		}
		hash2[0] = twoSum;
		hash3[0] = threeSum;
		
		bool found = false;
		vector<vector<ll>> check(mod + 1);
		check[twoSum].push_back(threeSum);
		for (int i = mid; i < n; i++) {
			hash2[i - mid + 1] = (hash2[i - mid] - (two * s[i - mid]) % mod) % mod;
			if (hash2[i - mid + 1] < 0) hash2[i - mid + 1] += mod;
			hash2[i - mid + 1] = (((2 * hash2[i - mid + 1]) % mod) + s[i]) % mod;
			hash3[i - mid + 1] = (hash3[i - mid] - (three * s[i - mid]) % modulo) % modulo;
			if (hash3[i - mid + 1] < 0) hash3[i - mid + 1] += modulo;
			hash3[i - mid + 1] = (((3 * hash3[i - mid + 1]) % modulo) + s[i]) % modulo;
			for (auto n : check[hash2[i - mid + 1]]) {
				if (n == hash3[i - mid + 1]) found = true;
			}
			if (!found) check[hash2[i - mid + 1]].push_back(hash3[i - mid + 1]);
		}

		if (found) start = mid + 1;
		else end = mid - 1;
	}
	cout << min(start, end);
	return 0;
}
