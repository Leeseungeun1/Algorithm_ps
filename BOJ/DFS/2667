/*
  2667-단지번호 붙이기
  이 문제는 연결 요소 그래프의 크기와 그 수를 구하는 문제다.
  따라서 어떤 정점을 시작으로 연결 요소 그래프를 찾을 수 있다면, 해당 연결 요소 그래프의 크기를 구한다.
  그리고 다른 정점들을 살펴 보면서, 만약 방문하지 않은 정점이 있다면, 해당 정점을 시작으로 또 다른 연결 요소 그래프를 찾는다.
  이 과정을 반복하면서 좌표 내 모든 연결 요소 그래프의 크기를 구한다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int dx[4] = { 0, -1, 0, 1 };
int dy[4] = { -1, 0, 1, 0 };
int dfs(vector<vector<int>>& arr, vector<vector<bool>>& check, int x, int y, int row, int col) {
	check[x][y] = true;

	int ret = 0;
	for (int i = 0; i < 4; i++) {
		if (0 <= x + dx[i] && x + dx[i] < row && 0 <= y + dy[i] && y + dy[i] < col) {
			if (arr[x + dx[i]][y + dy[i]]==1 &&check[x + dx[i]][y + dy[i]] == false) {
				ret = ret + dfs(arr, check, x + dx[i], y + dy[i], row, col);
			}
		}
	}
	return ret + 1;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int n;
	cin >> n;
	vector<vector<int>> arr(n, vector<int>(n));
	vector<vector<bool>> check(n, vector<bool>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = 0;
			check[i][j] = false;
		}
	}
	
	for (int i = 0; i < n; i++) {
		string str;
		cin >> str;
		for (int s = 0; s < str.size(); s++) {
			if (str[s] == '0') arr[i][s] = 0;
			else arr[i][s] = 1;
		}
	}

	vector<int> ans;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] == 1 && check[i][j] == false) {
				ans.push_back(dfs(arr, check, i, j, n, n));
			}
		}
	}
	sort(ans.begin(), ans.end());
	cout << ans.size() << "\n";
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i] << "\n";
	}
	return 0;
}
