/*
  11403-경로 찾기
  이 문제를 해결하기 위해서 dfs를 이용하여 각 시작점마다 어떤 node에 도착할 수 있는지를 파악하면 된다.
  시작하는 점을 고정하고, 해당 점으로 부터 그래프 탐색을 했을 때, 지나칠 수 있는 모든 점에 대한 정보를 저장하면서
  탐색을 진행하면 문제를 해결할 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

void dfs(vector<vector<int>>& arr, vector<vector<int>>& ans, int start, int num, vector<bool>& visited) {
	visited[num] = true;

	for (auto i : arr[num]) {
		ans[start][i] = 1;
		if (visited[i] == false) {
			dfs(arr, ans, start, i, visited);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int n, t;
	cin >> n;

	vector<vector<int>> arr(n);
	vector<vector<int>> ans(n, vector<int>(n));
	vector<bool> visited(n);
	for (int i = 0; i < n; i++) {
		visited[i] = false;
		for (int j = 0; j < n; j++) {
			ans[i][j] = 0;
			cin >> t;
			if (t == 1) {
				arr[i].push_back(j);
			}
		}
	}

	for (int i = 0; i < n; i++) {
		dfs(arr, ans, i, i, visited);
		for (int j = 0; j < n; j++) visited[j] = false;
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << ans[i][j] << " ";
		}
		cout << "\n";
	}
	return 0;
}
