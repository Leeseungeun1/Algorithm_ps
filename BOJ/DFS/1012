/*
  1012-유기농 배추
  이 문제는 1로 연결 된 연결 요소 그래프의 개수를 찾는 문제다.
  따라서 각 좌표를 살펴보면서 한 좌표의 값이 1이면, 해당 좌표로 부터 갈 수 있는 좌표들을 모두 방문한다.
  그리고 다시 또 다른 좌표의 값이 1이면서 방문하지 않은 좌표를 시작으로 갈 수 있는 모든 좌표들을 방문한다.
  이런 과정을 반복하면서 연결 요소 그래프의 개수를 찾으면 된다.
  이 때, 연결 요소 그래프의 시작점을 찾을 때 마다 연결 요소 그래프를 카운팅 해 준다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int dx[4] = { 0, -1, 0, 1 };
int dy[4] = { -1, 0, 1, 0 };
void dfs(vector<vector<int>>& arr, vector<vector<bool>>& check, int x, int y, int row, int col) {
	check[x][y] = true;

	for (int i = 0; i < 4; i++) {
		if (0 <= x + dx[i] && x + dx[i] < row && 0 <= y + dy[i] && y + dy[i] < col) {
			if (arr[x + dx[i]][y + dy[i]]==1 &&check[x + dx[i]][y + dy[i]] == false) {
				dfs(arr, check, x + dx[i], y + dy[i], row, col);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int t;
	cin >> t;
	while (t--) {
		int m, n, k;
		cin >> m >> n >> k;
		vector<vector<int>> arr(n, vector<int>(m));
		vector<vector<bool>> check(n, vector<bool>(m));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				arr[i][j] = 0;
				check[i][j] = false;
			}
		}

		while (k--) {
			int a, b;
			cin >> a >> b;
			arr[b][a] = 1;
		}
		
		int cnt = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (arr[i][j]==1 && check[i][j] == false) {
					dfs(arr, check, i, j, n, m);
					cnt++;
				}
			}
		}
		cout << cnt << "\n";
	}
	return 0;
}
