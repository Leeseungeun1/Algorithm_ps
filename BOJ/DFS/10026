/*
  10026-적록색약
  이 문제는 동일한 문자로 연결되어있는 연결 요소 그래프의 수를 구하는 문제다.
  이 때, 적록색약인 사람은 빨간색과 초록색을 동일한 색깔로 보기 때문에, R이 들어온다면 해당 문제를 G로 바꿔 저장 해 준다.
  그리고 적록색약인 사람과 적록색약이 아닌 사람 각각이 R에 대해서, G에 대해서, 그리고 B에 대해서 연결 요소 그래프를 몇 개를 찾을 수 있는지를 구하면 된다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
void dfs(vector<vector<char>>& arr, vector<vector<bool>>& visited, int x, int y, int n, char c) {
	visited[x][y] = true;

	for (int i = 0; i < 4; i++) {
		if (0 <= x + dx[i] && x + dx[i] < n && 0 <= y + dy[i] && y + dy[i] < n) {
			if (arr[x + dx[i]][y + dy[i]] == c && visited[x + dx[i]][y + dy[i]] == false) {
				dfs(arr, visited, x + dx[i], y + dy[i], n, c);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int n;
	cin >> n;
	vector<vector<char>> RGB(n, vector<char>(n));
	vector<vector<char>> GB(n, vector<char>(n));
	vector<vector<bool>> visited(n, vector<bool>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> RGB[i][j];
			GB[i][j] = RGB[i][j];
			if (GB[i][j] == 'R') GB[i][j] = 'G';
			visited[i][j] = false;
		}
	}

	int first = 0;
	int second = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (RGB[i][j] == 'R' && visited[i][j] == false) {
				dfs(RGB, visited, i, j, n, 'R');
				first++;
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (RGB[i][j] == 'G' && visited[i][j] == false) {
				dfs(RGB, visited, i, j, n, 'G');
				first++;
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (RGB[i][j] == 'B' && visited[i][j] == false) {
				dfs(RGB, visited, i, j, n, 'B');
				first++;
				second++;
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) visited[i][j] = false;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (GB[i][j] == 'G' && visited[i][j] == false) {
				dfs(GB, visited, i, j, n, 'G');
				second++;
			}
		}
	}
	
	cout << first << " " << second;
	return 0;
}
