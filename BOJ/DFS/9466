/*
  9466-텀 프로젝트
  이 문제는 cycle에 포함되지 않는 node의 수를 구하는 문제다.
  이 문제를 해결하기 위해서 stack을 이용하여 dfs를 구현하였다.
  우선 한 번 node를 방문할 때마다 check표시를 하고, 현재 node를 stack에 저장한다.
  그리고 그 node가 향하는 다음 node로 이동을한다. 이 때, 다음 node에 이미 check표시가 되어있다면 이미 이 전에 한 번 방문한 node이므로 dfs를 중단한다.
  그 다음 dfs로 찾은 그래프가 cycle인지를 확인하는 과정을 거친다.
  stack을 살펴보면서 지금까지 지나친 node들을 확인하며, 마지막 node가 stack에 저장되어있는지 확인한다.
  만약 stack에 저장되어있다면, 해당 graph가 cycle이라는 뜻이므로 cycle에 포함되는 node의 수는 세지 않는다.
  만약 stack에 저장되어있지 않다면, 해당 graph가 acyclic이라는 뜻이므로 해당 graph에 포함 된 node들은 모두 팀을 이루지 못한다.
  이 과정을 통해 팀을 이루지 못한 node의 수를 셀 수 있다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		vector<int>arr(n + 1);
		vector<bool> check(n + 1);
		int cnt = 0;
		for (int i = 1; i <= n; i++) {
			cin >> arr[i];
			check[i] = false;
		}

		int start = 0;
		for (int i = 1; i <= n; i++) {
			if (check[i] == true) continue;
			stack<int> s;
			start = i;
			int move = i;
			while (check[move] == false) {
				check[move] = true;
				s.push(move);
				move = arr[move];
			}
			int sum = 0;
			if (move != start) {
				while (!s.empty()) {
					if (move == s.top()) sum = 0;
					else sum++;
					s.pop();
				}
				cnt = cnt + sum;
			}
		}
		cout << cnt << "\n";
	}
	return 0;
}
