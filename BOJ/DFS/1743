/*
  1743-음식물 피하기
  이 문제는 연결 요소 그래프 중 가장 큰 연결 요소 그래프를 찾는 문제다.
  따라서 좌표 내에 있는 모든 연결 요소 그래프를 찾고, 해당 그래프의 크기를 구한뒤,
  그래프 크기의 최댓값을 구하여 해결할 수 있는 문제다.
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>

using namespace std;
typedef long long ll;

int dx[4] = { 0, -1, 0, 1 };
int dy[4] = { -1, 0, 1, 0 };
int dfs(vector<vector<int>>& arr, vector<vector<bool>>& check, int x, int y, int row, int col) {
	check[x][y] = true;

	int ret = 0;
	for (int i = 0; i < 4; i++) {
		if (0 <= x + dx[i] && x + dx[i] < row && 0 <= y + dy[i] && y + dy[i] < col) {
			if (arr[x + dx[i]][y + dy[i]]==1 &&check[x + dx[i]][y + dy[i]] == false) {
				ret = ret + dfs(arr, check, x + dx[i], y + dy[i], row, col);
			}
		}
	}
	return ret + 1;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int m, n, k;
	cin >> m >> n >> k;
	vector<vector<int>> arr(m, vector<int>(n));
	vector<vector<bool>> check(m, vector<bool>(n));
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = 0;
			check[i][j] = false;
		}
	}

	while (k--) {
		int a, b;
		cin >> a >> b;
		arr[a-1][b-1] = 1;
	}

	int maximum = 0;
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] == 1 && check[i][j] == false) {
				maximum = max(maximum, dfs(arr, check, i, j, m, n));
			}
		}
	}
	cout << maximum << "\n";
	return 0;
}
