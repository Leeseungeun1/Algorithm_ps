/*
  4948-베르트랑 공준
  우선 소수를 찾기 위해서 에라토스테네스의 체를 이용한다.
  이렇게 1부터 300,000까지의 수 중에서 소수를 찾는다.
  그리고 입력되는 수 n에 대해서 n부터 2*n까지 소수를 count하고 이를 출력한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	vector<bool> isPrime(300000, true);
	isPrime[0] = isPrime[1] = false;
	for (int i = 1; i < 300000; i++) {
		if (!isPrime[i]) continue;
		for (int j = i * 2; j < 300000; j = j + i) {
			if (!isPrime[j]) continue;
			isPrime[j] = false;
		}
	}

	int n;
	while (1) {
		cin >> n;
		if (n == 0) break;
		int cnt = 0;
		for (int i = n + 1; i <= 2 * n; i++) {
			if (isPrime[i]) cnt++;
		}
		cout << cnt << "\n";
	}
	return 0;
}
