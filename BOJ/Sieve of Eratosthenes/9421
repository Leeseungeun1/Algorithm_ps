/*
  9421 - 소수상근수
  우선 에라토스테네스의 체를 이용하여 1부터 1,000,000까지의 소수를 구한다.
  그리고 입력오는 수 이하의 소수를 직접 계산하면서 해당 수가 상근수인지 여부를 확인한다.
  만약 상근수가 아니게 되면 계산과정을 통해서 나온 수가 또 나오게 된다.
  이런 경우에는 set을 이용하여, 이미 한번 나온 수인지 여부를 확인하고
  이미 나왔던 수라면 해당 수가 상근수가 아니라고 판단한다.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <vector>
#include <limits.h>
#include <math.h>
#include <queue>
#include <string>
#include <stack>
#include <list>
#include <stdlib.h>
#include <cstring>
#include <deque>
#include <set>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<char, ll> pci;
typedef pair<int, pair<int, int>> piii;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	vector<bool> isPrime(1000001, true);
	isPrime[0] = isPrime[1] = false;
	for (int i = 1; i < 1000001; i++) {
		if (!isPrime[i]) continue;
		for (int j = i * 2; j < 1000001; j = j + i) {
			if (!isPrime[j]) continue;
			isPrime[j] = false;
		}
	}

	vector<int> prime;
	for (int i = 1; i < 1000001; i++) {
		if (isPrime[i]) prime.push_back(i);
	}

	int n;
	cin >> n;

	int size = prime.size();
	for (int i = 0; i < size; i++) {
		if (prime[i] > n) break;
		set<int> s;
		int num = prime[i];
		bool possible = true;
		while (1) {
			int cal = 0;
			while (num != 0) {
				cal += (num % 10) * (num % 10);
				num = num / 10;
			}
			if (cal == 1) break;
			if (s.find(cal) != s.end()) {
				possible = false;
				break;
			}
			s.insert(cal);
			num = cal;
		}
		if (possible) cout << prime[i] << "\n";
	}
	return 0;
}
